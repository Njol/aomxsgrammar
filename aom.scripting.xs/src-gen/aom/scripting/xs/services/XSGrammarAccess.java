/*
 * generated by Xtext
 */
package aom.scripting.xs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Program");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		/// *
		//  * NOT supported by XS
		//  * - power a^n
		//  * - ternary b ? x : y;
		//  * - prefix: ++i
		//  * - inline pre/postfix: a + x++
		//  * - unary minus: -x 
		//  * - XOR (^)
		//  * - negation (!)
		//  * - long, double?
		//  * - bitwise and/or
		//  * - +=, -=, ...
		//  * 
		//  * other notes:
		//  *  - operator precedence is weird
		//  *  - only three scopes: global, file, local; file scope is only used for non-exported global variables
		//  *  - return() requires parentheses (except if not returning anything), and is optional
		//  *  - function arguments require default values
		//  *  - vector() only works for constant arguments
		//  *  - functions must be defined before they are used like in C, forward declarations are done with 'mutable <header> {}'
		//  *  - switch cases don't require a 'break'
		//  * / Program:
		//	declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRuleDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaration:
		//	GlobalVarDeclaration
		//	| FunDeclaration
		//	| IncludeStatement
		//	| RuleDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//GlobalVarDeclaration | FunDeclaration | IncludeStatement | RuleDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalVarDeclaration
		public RuleCall getGlobalVarDeclarationParserRuleCall_0() { return cGlobalVarDeclarationParserRuleCall_0; }

		//FunDeclaration
		public RuleCall getFunDeclarationParserRuleCall_1() { return cFunDeclarationParserRuleCall_1; }

		//IncludeStatement
		public RuleCall getIncludeStatementParserRuleCall_2() { return cIncludeStatementParserRuleCall_2; }

		//RuleDeclaration
		public RuleCall getRuleDeclarationParserRuleCall_3() { return cRuleDeclarationParserRuleCall_3; }
	}

	public class IncludeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IncludeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilePathAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IncludeStatement:
		//	'include' filePath=STRING ';' // paths are relative to main directory (e.g. ai2 or trigger2), not to current directory
		//;
		@Override public ParserRule getRule() { return rule; }

		//'include' filePath=STRING ';'
		public Group getGroup() { return cGroup; }

		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//filePath=STRING
		public Assignment getFilePathAssignment_1() { return cFilePathAssignment_1; }

		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_1_0() { return cFilePathSTRINGTerminalRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VarDeclaration:
		//	type=VarTypeSpecifier name=ID '=' value=Expression //no semicolon to enable reuse
		//;
		@Override public ParserRule getRule() { return rule; }

		//type=VarTypeSpecifier name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_0_0() { return cTypeVarTypeSpecifierParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class GlobalVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.GlobalVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierVarModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueLiteralOrVarParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GlobalVarDeclaration VarDeclaration:
		//	{GlobalVarDeclaration} modifier=VarModifier type=VarTypeSpecifier name=ID '=' value=LiteralOrVar ';'
		@Override public ParserRule getRule() { return rule; }

		//{GlobalVarDeclaration} modifier=VarModifier type=VarTypeSpecifier name=ID '=' value=LiteralOrVar ';'
		public Group getGroup() { return cGroup; }

		//{GlobalVarDeclaration}
		public Action getGlobalVarDeclarationAction_0() { return cGlobalVarDeclarationAction_0; }

		//modifier=VarModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//VarModifier
		public RuleCall getModifierVarModifierParserRuleCall_1_0() { return cModifierVarModifierParserRuleCall_1_0; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_2_0() { return cTypeVarTypeSpecifierParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=LiteralOrVar
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//LiteralOrVar
		public RuleCall getValueLiteralOrVarParserRuleCall_5_0() { return cValueLiteralOrVarParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class VarModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cConstConstKeyword_1_0_0 = (Keyword)cConstAssignment_1_0.eContents().get(0);
		private final Assignment cExternAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cExternExternKeyword_1_1_0 = (Keyword)cExternAssignment_1_1.eContents().get(0);
		
		//VarModifier:
		//	{VarModifier} (const?='const'? & extern?='extern'?);
		@Override public ParserRule getRule() { return rule; }

		//{VarModifier} (const?='const'? & extern?='extern'?)
		public Group getGroup() { return cGroup; }

		//{VarModifier}
		public Action getVarModifierAction_0() { return cVarModifierAction_0; }

		//(const?='const'? & extern?='extern'?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//const?='const'?
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }

		//'const'
		public Keyword getConstConstKeyword_1_0_0() { return cConstConstKeyword_1_0_0; }

		//extern?='extern'?
		public Assignment getExternAssignment_1_1() { return cExternAssignment_1_1; }

		//'extern'
		public Keyword getExternExternKeyword_1_1_0() { return cExternExternKeyword_1_1_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralOrVarParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ParameterDeclaration VarDeclaration:
		//	type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
		@Override public ParserRule getRule() { return rule; }

		//type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
		public Group getGroup() { return cGroup; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_0_0() { return cTypeVarTypeSpecifierParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=LiteralOrVar
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//LiteralOrVar
		public RuleCall getValueLiteralOrVarParserRuleCall_3_0() { return cValueLiteralOrVarParserRuleCall_3_0; }
	}

	public class ForVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ForVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ForVarDeclaration VarDeclaration:
		//	name=ID '=' value=Expression
		@Override public ParserRule getRule() { return rule; }

		//name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class FunDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FunDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierFunModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFunTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamlistAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamlistParamsParserRuleCall_4_0 = (RuleCall)cParamlistAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsCompoundStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		
		//FunDeclaration:
		//	modifier=FunModifier type=FunTypeSpecifier name=ID '(' paramlist=Params? ')' statements=CompoundStatement;
		@Override public ParserRule getRule() { return rule; }

		//modifier=FunModifier type=FunTypeSpecifier name=ID '(' paramlist=Params? ')' statements=CompoundStatement
		public Group getGroup() { return cGroup; }

		//modifier=FunModifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//FunModifier
		public RuleCall getModifierFunModifierParserRuleCall_0_0() { return cModifierFunModifierParserRuleCall_0_0; }

		//type=FunTypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//FunTypeSpecifier
		public RuleCall getTypeFunTypeSpecifierParserRuleCall_1_0() { return cTypeFunTypeSpecifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//paramlist=Params?
		public Assignment getParamlistAssignment_4() { return cParamlistAssignment_4; }

		//Params
		public RuleCall getParamlistParamsParserRuleCall_4_0() { return cParamlistParamsParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//statements=CompoundStatement
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//CompoundStatement
		public RuleCall getStatementsCompoundStatementParserRuleCall_6_0() { return cStatementsCompoundStatementParserRuleCall_6_0; }
	}

	public class FunTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FunTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunTypeSpecifier:
		//	VoidType
		//	| VarTypeSpecifier;
		@Override public ParserRule getRule() { return rule; }

		//VoidType | VarTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }

		//VarTypeSpecifier
		public RuleCall getVarTypeSpecifierParserRuleCall_1() { return cVarTypeSpecifierParserRuleCall_1; }
	}

	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Params");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParamsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamsParameterDeclarationParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsParameterDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		
		//Params:
		//	{Params} 'void'
		//	| params+=ParameterDeclaration (',' params+=ParameterDeclaration)*;
		@Override public ParserRule getRule() { return rule; }

		//{Params} 'void' | params+=ParameterDeclaration (',' params+=ParameterDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Params} 'void'
		public Group getGroup_0() { return cGroup_0; }

		//{Params}
		public Action getParamsAction_0_0() { return cParamsAction_0_0; }

		//'void'
		public Keyword getVoidKeyword_0_1() { return cVoidKeyword_0_1; }

		//params+=ParameterDeclaration (',' params+=ParameterDeclaration)*
		public Group getGroup_1() { return cGroup_1; }

		//params+=ParameterDeclaration
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }

		//ParameterDeclaration
		public RuleCall getParamsParameterDeclarationParserRuleCall_1_0_0() { return cParamsParameterDeclarationParserRuleCall_1_0_0; }

		//(',' params+=ParameterDeclaration)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//params+=ParameterDeclaration
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParamsParameterDeclarationParserRuleCall_1_1_1_0() { return cParamsParameterDeclarationParserRuleCall_1_1_1_0; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cUnorderedGroup_2.eContents().get(0);
		private final Assignment cActiveAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final Keyword cActiveActiveKeyword_2_0_0_0 = (Keyword)cActiveAssignment_2_0_0.eContents().get(0);
		private final Keyword cInactiveKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cRunImmediatelyAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cRunImmediatelyRunImmediatelyKeyword_2_1_0 = (Keyword)cRunImmediatelyAssignment_2_1.eContents().get(0);
		private final Assignment cHighFrequencyAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cHighFrequencyHighFrequencyKeyword_2_2_0 = (Keyword)cHighFrequencyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cGroupKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cGroupAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cGroupIDTerminalRuleCall_2_3_1_0 = (RuleCall)cGroupAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cMinIntervalKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cMinIntervalAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cMinIntervalINTTerminalRuleCall_2_4_1_0 = (RuleCall)cMinIntervalAssignment_2_4_1.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cMaxIntervalKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cMaxIntervalAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cMaxIntervalINTTerminalRuleCall_2_5_1_0 = (RuleCall)cMaxIntervalAssignment_2_5_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsCompoundStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//RuleDeclaration:
		//	'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'?
		//	& highFrequency?='highFrequency'?
		//	& ('group' group=ID)?
		//	& ('minInterval' minInterval=INT)?
		//	& ('maxInterval' maxInterval=INT)?) statements=CompoundStatement;
		@Override public ParserRule getRule() { return rule; }

		//'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'? & highFrequency?='highFrequency'? &
		//('group' group=ID)? & ('minInterval' minInterval=INT)? & ('maxInterval' maxInterval=INT)?)
		//statements=CompoundStatement
		public Group getGroup() { return cGroup; }

		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//((active?='active' | 'inactive') & runImmediately?='runImmediately'? & highFrequency?='highFrequency'? & ('group'
		//group=ID)? & ('minInterval' minInterval=INT)? & ('maxInterval' maxInterval=INT)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//(active?='active' | 'inactive')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//active?='active'
		public Assignment getActiveAssignment_2_0_0() { return cActiveAssignment_2_0_0; }

		//'active'
		public Keyword getActiveActiveKeyword_2_0_0_0() { return cActiveActiveKeyword_2_0_0_0; }

		//'inactive'
		public Keyword getInactiveKeyword_2_0_1() { return cInactiveKeyword_2_0_1; }

		//runImmediately?='runImmediately'?
		public Assignment getRunImmediatelyAssignment_2_1() { return cRunImmediatelyAssignment_2_1; }

		//'runImmediately'
		public Keyword getRunImmediatelyRunImmediatelyKeyword_2_1_0() { return cRunImmediatelyRunImmediatelyKeyword_2_1_0; }

		//highFrequency?='highFrequency'?
		public Assignment getHighFrequencyAssignment_2_2() { return cHighFrequencyAssignment_2_2; }

		//'highFrequency'
		public Keyword getHighFrequencyHighFrequencyKeyword_2_2_0() { return cHighFrequencyHighFrequencyKeyword_2_2_0; }

		//('group' group=ID)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//'group'
		public Keyword getGroupKeyword_2_3_0() { return cGroupKeyword_2_3_0; }

		//group=ID
		public Assignment getGroupAssignment_2_3_1() { return cGroupAssignment_2_3_1; }

		//ID
		public RuleCall getGroupIDTerminalRuleCall_2_3_1_0() { return cGroupIDTerminalRuleCall_2_3_1_0; }

		//('minInterval' minInterval=INT)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//'minInterval'
		public Keyword getMinIntervalKeyword_2_4_0() { return cMinIntervalKeyword_2_4_0; }

		//minInterval=INT
		public Assignment getMinIntervalAssignment_2_4_1() { return cMinIntervalAssignment_2_4_1; }

		//INT
		public RuleCall getMinIntervalINTTerminalRuleCall_2_4_1_0() { return cMinIntervalINTTerminalRuleCall_2_4_1_0; }

		//('maxInterval' maxInterval=INT)?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//'maxInterval'
		public Keyword getMaxIntervalKeyword_2_5_0() { return cMaxIntervalKeyword_2_5_0; }

		//maxInterval=INT
		public Assignment getMaxIntervalAssignment_2_5_1() { return cMaxIntervalAssignment_2_5_1; }

		//INT
		public RuleCall getMaxIntervalINTTerminalRuleCall_2_5_1_0() { return cMaxIntervalINTTerminalRuleCall_2_5_1_0; }

		//statements=CompoundStatement
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//CompoundStatement
		public RuleCall getStatementsCompoundStatementParserRuleCall_3_0() { return cStatementsCompoundStatementParserRuleCall_3_0; }
	}

	public class FunModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FunModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunModifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutableKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		
		//FunModifier:
		//	{FunModifier} mutable?='mutable'?;
		@Override public ParserRule getRule() { return rule; }

		//{FunModifier} mutable?='mutable'?
		public Group getGroup() { return cGroup; }

		//{FunModifier}
		public Action getFunModifierAction_0() { return cFunModifierAction_0; }

		//mutable?='mutable'?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }

		//'mutable'
		public Keyword getMutableMutableKeyword_1_0() { return cMutableMutableKeyword_1_0; }
	}

	public class VarTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVectorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VarTypeSpecifier:
		//	IntType
		//	| FloatType
		//	| BoolType
		//	| VectorType
		//	| StringType;
		@Override public ParserRule getRule() { return rule; }

		//IntType | FloatType | BoolType | VectorType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_1() { return cFloatTypeParserRuleCall_1; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_2() { return cBoolTypeParserRuleCall_2; }

		//VectorType
		public RuleCall getVectorTypeParserRuleCall_3() { return cVectorTypeParserRuleCall_3; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
	}

	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsVarDeclarationOrStatementParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundStatement:
		//	{CompoundStatement} '{' contents+=VarDeclarationOrStatement* '}';
		@Override public ParserRule getRule() { return rule; }

		//{CompoundStatement} '{' contents+=VarDeclarationOrStatement* '}'
		public Group getGroup() { return cGroup; }

		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//contents+=VarDeclarationOrStatement*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }

		//VarDeclarationOrStatement
		public RuleCall getContentsVarDeclarationOrStatementParserRuleCall_2_0() { return cContentsVarDeclarationOrStatementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VarDeclarationOrStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarDeclarationOrStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDeclarationOrStatement:
		//	VarDeclaration ';'
		//	| Statement;
		@Override public ParserRule getRule() { return rule; }

		//VarDeclaration ';' | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDeclaration ';'
		public Group getGroup_0() { return cGroup_0; }

		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0_0() { return cVarDeclarationParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostfixStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompoundStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfElseStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSwitchStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContinueStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBreakStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Statement:
		//	ExpressionStatement
		//	| PostfixStatement
		//	| CompoundStatement
		//	| IfElseStatement
		//	| WhileStatement
		//	| ForStatement
		//	| SwitchStatement
		//	| ReturnStatement
		//	| ContinueStatement //TODO add some restrictions (inside loop)
		//	| BreakStatement;
		@Override public ParserRule getRule() { return rule; }

		//ExpressionStatement | PostfixStatement | CompoundStatement | IfElseStatement | WhileStatement | ForStatement |
		//SwitchStatement | ReturnStatement | ContinueStatement //TODO add some restrictions (inside loop)
		//| BreakStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }

		//PostfixStatement
		public RuleCall getPostfixStatementParserRuleCall_1() { return cPostfixStatementParserRuleCall_1; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_2() { return cCompoundStatementParserRuleCall_2; }

		//IfElseStatement
		public RuleCall getIfElseStatementParserRuleCall_3() { return cIfElseStatementParserRuleCall_3; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_4() { return cWhileStatementParserRuleCall_4; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_5() { return cForStatementParserRuleCall_5; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_6() { return cSwitchStatementParserRuleCall_6; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_7() { return cReturnStatementParserRuleCall_7; }

		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_8() { return cContinueStatementParserRuleCall_8; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_9() { return cBreakStatementParserRuleCall_9; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement //typically 1 line, ends in semicolon
		//:
		//	expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression ';'
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PostfixStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PostfixStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarVarDeclarationCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpPostFixOpParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PostfixStatement:
		//	var=[VarDeclaration] op=PostFixOp ';';
		@Override public ParserRule getRule() { return rule; }

		//var=[VarDeclaration] op=PostFixOp ';'
		public Group getGroup() { return cGroup; }

		//var=[VarDeclaration]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[VarDeclaration]
		public CrossReference getVarVarDeclarationCrossReference_0_0() { return cVarVarDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getVarVarDeclarationIDTerminalRuleCall_0_0_1() { return cVarVarDeclarationIDTerminalRuleCall_0_0_1; }

		//op=PostFixOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//PostFixOp
		public RuleCall getOpPostFixOpParserRuleCall_1_0() { return cOpPostFixOpParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IfElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IfElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementStatementParserRuleCall_4_0 = (RuleCall)cThenStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfElseStatement:
		//	'if' '(' condition=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//'if' '(' condition=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//thenStatement=Statement
		public Assignment getThenStatementAssignment_4() { return cThenStatementAssignment_4; }

		//Statement
		public RuleCall getThenStatementStatementParserRuleCall_4_0() { return cThenStatementStatementParserRuleCall_4_0; }

		//(=> 'else' elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	'while' '(' condition=Expression ')' statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//'while' '(' condition=Expression ')' statement=Statement
		public Group getGroup() { return cGroup; }

		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarForVarDeclarationParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpRelOpParserRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' var=ForVarDeclaration ';' op=RelOp expression=Expression ')' statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//'for' '(' var=ForVarDeclaration ';' op=RelOp expression=Expression ')' statement=Statement
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ForVarDeclaration
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ForVarDeclaration
		public RuleCall getVarForVarDeclarationParserRuleCall_2_0() { return cVarForVarDeclarationParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//op=RelOp
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_4_0() { return cOpRelOpParserRuleCall_4_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//statement=Statement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_0() { return cStatementStatementParserRuleCall_7_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarVarDeclarationCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarVarDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVarVarDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesSwitchCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultSwitchDefaultParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatement:
		//	'switch' '(' var=[VarDeclaration] ')' '{' cases+=SwitchCase* default=SwitchDefault? '}';
		@Override public ParserRule getRule() { return rule; }

		//'switch' '(' var=[VarDeclaration] ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
		public Group getGroup() { return cGroup; }

		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[VarDeclaration]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[VarDeclaration]
		public CrossReference getVarVarDeclarationCrossReference_2_0() { return cVarVarDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVarVarDeclarationIDTerminalRuleCall_2_0_1() { return cVarVarDeclarationIDTerminalRuleCall_2_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//cases+=SwitchCase*
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_5_0() { return cCasesSwitchCaseParserRuleCall_5_0; }

		//default=SwitchDefault?
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//SwitchDefault
		public RuleCall getDefaultSwitchDefaultParserRuleCall_6_0() { return cDefaultSwitchDefaultParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarLiteralNumOrVarParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//SwitchCase //TODO check if strings, floats, ... allowed
		//:
		//	'case' var=LiteralNumOrVar ':' statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//'case' var=LiteralNumOrVar ':' statement=Statement
		public Group getGroup() { return cGroup; }

		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//var=LiteralNumOrVar
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//LiteralNumOrVar
		public RuleCall getVarLiteralNumOrVarParserRuleCall_1_0() { return cVarLiteralNumOrVarParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
	}

	public class SwitchDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//SwitchDefault:
		//	'default' ':' statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//'default' ':' statement=Statement
		public Group getGroup() { return cGroup; }

		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	{ReturnStatement} 'return' ('(' expression=Expression ')')? ';';
		@Override public ParserRule getRule() { return rule; }

		//{ReturnStatement} 'return' ('(' expression=Expression ')')? ';'
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//('(' expression=Expression ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	{ContinueStatement} 'continue' ';';
		@Override public ParserRule getRule() { return rule; }

		//{ContinueStatement} 'continue' ';'
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//'continue'
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	{BreakStatement} 'break' ';';
		@Override public ParserRule getRule() { return rule; }

		//{BreakStatement} 'break' ';'
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PostFixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PostFixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PostFixOp:
		//	'++'
		//	| '--';
		@Override public ParserRule getRule() { return rule; }

		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cVarAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_1_0_0 = (RuleCall)cVarAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_2_0 = (RuleCall)cExpressionAssignment_0_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Expression:
		//	{AssignmentExpression} (var=Var '=' expression=Expression) | expression=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//{AssignmentExpression} (var=Var '=' expression=Expression) | expression=SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AssignmentExpression} (var=Var '=' expression=Expression)
		public Group getGroup_0() { return cGroup_0; }

		//{AssignmentExpression}
		public Action getAssignmentExpressionAction_0_0() { return cAssignmentExpressionAction_0_0; }

		//(var=Var '=' expression=Expression)
		public Group getGroup_0_1() { return cGroup_0_1; }

		//var=Var
		public Assignment getVarAssignment_0_1_0() { return cVarAssignment_0_1_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_1_0_0() { return cVarVarParserRuleCall_0_1_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_2() { return cExpressionAssignment_0_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_2_0() { return cExpressionExpressionParserRuleCall_0_1_2_0; }

		//expression=SimpleExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SimpleExpression
		public RuleCall getExpressionSimpleExpressionParserRuleCall_1_0() { return cExpressionSimpleExpressionParserRuleCall_1_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Var");
		private final Assignment cDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDeclarationVarDeclarationCrossReference_0 = (CrossReference)cDeclarationAssignment.eContents().get(0);
		private final RuleCall cDeclarationVarDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cDeclarationVarDeclarationCrossReference_0.eContents().get(1);
		
		//Var:
		//	declaration=[VarDeclaration];
		@Override public ParserRule getRule() { return rule; }

		//declaration=[VarDeclaration]
		public Assignment getDeclarationAssignment() { return cDeclarationAssignment; }

		//[VarDeclaration]
		public CrossReference getDeclarationVarDeclarationCrossReference_0() { return cDeclarationVarDeclarationCrossReference_0; }

		//ID
		public RuleCall getDeclarationVarDeclarationIDTerminalRuleCall_0_1() { return cDeclarationVarDeclarationIDTerminalRuleCall_0_1; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleExpression Expression:
		//	AndExpression ({Or.left=current} op='||' right=AndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({Or.left=current} op='||' right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({Or.left=current} op='||' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualsExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualsExpression ({And.left=current} op='&&' right=EqualsExpression)*
		@Override public ParserRule getRule() { return rule; }

		//EqualsExpression ({And.left=current} op='&&' right=EqualsExpression)*
		public Group getGroup() { return cGroup; }

		//EqualsExpression
		public RuleCall getEqualsExpressionParserRuleCall_0() { return cEqualsExpressionParserRuleCall_0; }

		//({And.left=current} op='&&' right=EqualsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }

		//right=EqualsExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualsExpression
		public RuleCall getRightEqualsExpressionParserRuleCall_1_2_0() { return cRightEqualsExpressionParserRuleCall_1_2_0; }
	}

	public class EqualsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.EqualsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEqOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualsExpression Expression:
		//	ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup() { return cGroup; }

		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }

		//({Equals.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0() { return cEqualsLeftAction_1_0; }

		//op=EqOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EqOp
		public RuleCall getOpEqOpParserRuleCall_1_1_0() { return cOpEqOpParserRuleCall_1_1_0; }

		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}

	public class EqOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.EqOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqOp:
		//	'=='
		//	| '!=';
		@Override public ParserRule getRule() { return rule; }

		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({Comparison.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=RelOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_1_1_0() { return cOpRelOpParserRuleCall_1_1_0; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class RelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.RelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelOp:
		//	'<='
		//	| '<'
		//	| '>'
		//	| '>=';
		@Override public ParserRule getRule() { return rule; }

		//'<=' | '<' | '>' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAddOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }

		//op=AddOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//AddOp
		public RuleCall getOpAddOpParserRuleCall_1_1_0() { return cOpAddOpParserRuleCall_1_1_0; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AddOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AddOp:
		//	'+'
		//	| '-';
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMulOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	Atom ({Factor.left=current} op=MulOp right=Atom)*
		@Override public ParserRule getRule() { return rule; }

		//Atom ({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup() { return cGroup; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup_1() { return cGroup_1; }

		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }

		//op=MulOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MulOp
		public RuleCall getOpMulOpParserRuleCall_1_1_0() { return cOpMulOpParserRuleCall_1_1_0; }

		//right=Atom
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atom
		public RuleCall getRightAtomParserRuleCall_1_2_0() { return cRightAtomParserRuleCall_1_2_0; }
	}

	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.MulOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MulOp:
		//	'*'
		//	| '/'
		//	| '%' //modulo has same order of operation as multiplication
		//;
		@Override public ParserRule getRule() { return rule; }

		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final RuleCall cCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralOrVarParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atom Expression:
		//	{PrimaryExpression} ('(' expression=Expression ')') | Call
		//	| LiteralOrVar
		@Override public ParserRule getRule() { return rule; }

		//{PrimaryExpression} ('(' expression=Expression ')') | Call | LiteralOrVar
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PrimaryExpression} ('(' expression=Expression ')')
		public Group getGroup_0() { return cGroup_0; }

		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0_0() { return cPrimaryExpressionAction_0_0; }

		//('(' expression=Expression ')')
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//Call
		public RuleCall getCallParserRuleCall_1() { return cCallParserRuleCall_1; }

		//LiteralOrVar
		public RuleCall getLiteralOrVarParserRuleCall_2() { return cLiteralOrVarParserRuleCall_2; }
	}

	public class LiteralOrVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralOrVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralOrVar:
		//	Var
		//	| Literal;
		@Override public ParserRule getRule() { return rule; }

		//Var | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralVectorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueVectorParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	LiteralNum
		//	| {LiteralVector} value=Vector
		//	| {LiteralString} value=STRING //TODO concatenation != addition
		//;
		@Override public ParserRule getRule() { return rule; }

		//LiteralNum | {LiteralVector} value=Vector | {LiteralString} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralNum
		public RuleCall getLiteralNumParserRuleCall_0() { return cLiteralNumParserRuleCall_0; }

		//{LiteralVector} value=Vector
		public Group getGroup_1() { return cGroup_1; }

		//{LiteralVector}
		public Action getLiteralVectorAction_1_0() { return cLiteralVectorAction_1_0; }

		//value=Vector
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Vector
		public RuleCall getValueVectorParserRuleCall_1_1_0() { return cValueVectorParserRuleCall_1_1_0; }

		//{LiteralString} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{LiteralString}
		public Action getLiteralStringAction_2_0() { return cLiteralStringAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class LiteralNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralFloatAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSignedFloatParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralBoolAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBoolParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//LiteralNum:
		//	{LiteralInt} value=SignedInt
		//	| {LiteralFloat} value=SignedFloat
		//	| {LiteralBool} value=Bool // booleans are treated like ints
		//;
		@Override public ParserRule getRule() { return rule; }

		//{LiteralInt} value=SignedInt | {LiteralFloat} value=SignedFloat | {LiteralBool} value=Bool
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LiteralInt} value=SignedInt
		public Group getGroup_0() { return cGroup_0; }

		//{LiteralInt}
		public Action getLiteralIntAction_0_0() { return cLiteralIntAction_0_0; }

		//value=SignedInt
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0_1_0() { return cValueSignedIntParserRuleCall_0_1_0; }

		//{LiteralFloat} value=SignedFloat
		public Group getGroup_1() { return cGroup_1; }

		//{LiteralFloat}
		public Action getLiteralFloatAction_1_0() { return cLiteralFloatAction_1_0; }

		//value=SignedFloat
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//SignedFloat
		public RuleCall getValueSignedFloatParserRuleCall_1_1_0() { return cValueSignedFloatParserRuleCall_1_1_0; }

		//{LiteralBool} value=Bool
		public Group getGroup_2() { return cGroup_2; }

		//{LiteralBool}
		public Action getLiteralBoolAction_2_0() { return cLiteralBoolAction_2_0; }

		//value=Bool
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Bool
		public RuleCall getValueBoolParserRuleCall_2_1_0() { return cValueBoolParserRuleCall_2_1_0; }
	}

	public class LiteralNumOrVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralNumOrVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralNumOrVar:
		//	LiteralNum
		//	| Var;
		@Override public ParserRule getRule() { return rule; }

		//LiteralNum | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralNum
		public RuleCall getLiteralNumParserRuleCall_0() { return cLiteralNumParserRuleCall_0; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunDeclarationCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Call:
		//	function=[FunDeclaration] '(' args=Arguments? ')';
		@Override public ParserRule getRule() { return rule; }

		//function=[FunDeclaration] '(' args=Arguments? ')'
		public Group getGroup() { return cGroup; }

		//function=[FunDeclaration]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//[FunDeclaration]
		public CrossReference getFunctionFunDeclarationCrossReference_0_0() { return cFunctionFunDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getFunctionFunDeclarationIDTerminalRuleCall_0_0_1() { return cFunctionFunDeclarationIDTerminalRuleCall_0_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args=Arguments?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_2_0() { return cArgsArgumentsParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Arguments:
		//	expressions+=Expression (',' expressions+=Expression)* //TODO link with params
		//;
		@Override public ParserRule getRule() { return rule; }

		//expressions+=Expression (',' expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//(',' expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} 'int';
		@Override public ParserRule getRule() { return rule; }

		//{IntType} 'int'
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} 'float';
		@Override public ParserRule getRule() { return rule; }

		//{FloatType} 'float'
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//'float'
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolType:
		//	{BoolType} 'bool';
		@Override public ParserRule getRule() { return rule; }

		//{BoolType} 'bool'
		public Group getGroup() { return cGroup; }

		//{BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class VectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VectorType:
		//	{VectorType} 'vector';
		@Override public ParserRule getRule() { return rule; }

		//{VectorType} 'vector'
		public Group getGroup() { return cGroup; }

		//{VectorType}
		public Action getVectorTypeAction_0() { return cVectorTypeAction_0; }

		//'vector'
		public Keyword getVectorKeyword_1() { return cVectorKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} 'string';
		@Override public ParserRule getRule() { return rule; }

		//{StringType} 'string'
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidType:
		//	{VoidType} 'void';
		@Override public ParserRule getRule() { return rule; }

		//{VoidType} 'void'
		public Group getGroup() { return cGroup; }

		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }

		//'void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Sign");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Sign:
		//	'-'
		//	//  | '+' //not allowed!
		//;
		@Override public ParserRule getRule() { return rule; }

		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInt ecore::EInt:
		//	Sign? INT
		@Override public ParserRule getRule() { return rule; }

		//Sign? INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SignedFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SignedFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SignedFloat ecore::EFloat:
		//	Sign? INT '.' INT
		@Override public ParserRule getRule() { return rule; }

		//Sign? INT '.' INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bool ecore::EBoolean:
		//	'true'
		//	| 'false'
		@Override public ParserRule getRule() { return rule; }

		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXLiteralNumOrVarParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYLiteralNumOrVarParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZLiteralNumOrVarParserRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Vector:
		//	'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')' //only literals or constants, else use xsVectorSet
		//;
		@Override public ParserRule getRule() { return rule; }

		//'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')'
		public Group getGroup() { return cGroup; }

		//'vector'
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=LiteralNumOrVar
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//LiteralNumOrVar
		public RuleCall getXLiteralNumOrVarParserRuleCall_2_0() { return cXLiteralNumOrVarParserRuleCall_2_0; }

		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=LiteralNumOrVar
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//LiteralNumOrVar
		public RuleCall getYLiteralNumOrVarParserRuleCall_4_0() { return cYLiteralNumOrVarParserRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//z=LiteralNumOrVar
		public Assignment getZAssignment_6() { return cZAssignment_6; }

		//LiteralNumOrVar
		public RuleCall getZLiteralNumOrVarParserRuleCall_6_0() { return cZLiteralNumOrVarParserRuleCall_6_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private final ProgramElements pProgram;
	private final DeclarationElements pDeclaration;
	private final IncludeStatementElements pIncludeStatement;
	private final VarDeclarationElements pVarDeclaration;
	private final GlobalVarDeclarationElements pGlobalVarDeclaration;
	private final VarModifierElements pVarModifier;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final ForVarDeclarationElements pForVarDeclaration;
	private final FunDeclarationElements pFunDeclaration;
	private final FunTypeSpecifierElements pFunTypeSpecifier;
	private final ParamsElements pParams;
	private final RuleDeclarationElements pRuleDeclaration;
	private final FunModifierElements pFunModifier;
	private final VarTypeSpecifierElements pVarTypeSpecifier;
	private final CompoundStatementElements pCompoundStatement;
	private final VarDeclarationOrStatementElements pVarDeclarationOrStatement;
	private final StatementElements pStatement;
	private final ExpressionStatementElements pExpressionStatement;
	private final PostfixStatementElements pPostfixStatement;
	private final IfElseStatementElements pIfElseStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final SwitchCaseElements pSwitchCase;
	private final SwitchDefaultElements pSwitchDefault;
	private final ReturnStatementElements pReturnStatement;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final PostFixOpElements pPostFixOp;
	private final ExpressionElements pExpression;
	private final VarElements pVar;
	private final SimpleExpressionElements pSimpleExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualsExpressionElements pEqualsExpression;
	private final EqOpElements pEqOp;
	private final ComparisonExpressionElements pComparisonExpression;
	private final RelOpElements pRelOp;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AddOpElements pAddOp;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MulOpElements pMulOp;
	private final AtomElements pAtom;
	private final LiteralOrVarElements pLiteralOrVar;
	private final LiteralElements pLiteral;
	private final LiteralNumElements pLiteralNum;
	private final LiteralNumOrVarElements pLiteralNumOrVar;
	private final CallElements pCall;
	private final ArgumentsElements pArguments;
	private final IntTypeElements pIntType;
	private final FloatTypeElements pFloatType;
	private final BoolTypeElements pBoolType;
	private final VectorTypeElements pVectorType;
	private final StringTypeElements pStringType;
	private final VoidTypeElements pVoidType;
	private final SignElements pSign;
	private final SignedIntElements pSignedInt;
	private final SignedFloatElements pSignedFloat;
	private final BoolElements pBool;
	private final VectorElements pVector;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProgram = new ProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.pIncludeStatement = new IncludeStatementElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pGlobalVarDeclaration = new GlobalVarDeclarationElements();
		this.pVarModifier = new VarModifierElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pForVarDeclaration = new ForVarDeclarationElements();
		this.pFunDeclaration = new FunDeclarationElements();
		this.pFunTypeSpecifier = new FunTypeSpecifierElements();
		this.pParams = new ParamsElements();
		this.pRuleDeclaration = new RuleDeclarationElements();
		this.pFunModifier = new FunModifierElements();
		this.pVarTypeSpecifier = new VarTypeSpecifierElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pVarDeclarationOrStatement = new VarDeclarationOrStatementElements();
		this.pStatement = new StatementElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pPostfixStatement = new PostfixStatementElements();
		this.pIfElseStatement = new IfElseStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pSwitchDefault = new SwitchDefaultElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pPostFixOp = new PostFixOpElements();
		this.pExpression = new ExpressionElements();
		this.pVar = new VarElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualsExpression = new EqualsExpressionElements();
		this.pEqOp = new EqOpElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pRelOp = new RelOpElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAddOp = new AddOpElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMulOp = new MulOpElements();
		this.pAtom = new AtomElements();
		this.pLiteralOrVar = new LiteralOrVarElements();
		this.pLiteral = new LiteralElements();
		this.pLiteralNum = new LiteralNumElements();
		this.pLiteralNumOrVar = new LiteralNumOrVarElements();
		this.pCall = new CallElements();
		this.pArguments = new ArgumentsElements();
		this.pIntType = new IntTypeElements();
		this.pFloatType = new FloatTypeElements();
		this.pBoolType = new BoolTypeElements();
		this.pVectorType = new VectorTypeElements();
		this.pStringType = new StringTypeElements();
		this.pVoidType = new VoidTypeElements();
		this.pSign = new SignElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedFloat = new SignedFloatElements();
		this.pBool = new BoolElements();
		this.pVector = new VectorElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("aom.scripting.xs.XS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *
	//  * NOT supported by XS
	//  * - power a^n
	//  * - ternary b ? x : y;
	//  * - prefix: ++i
	//  * - inline pre/postfix: a + x++
	//  * - unary minus: -x 
	//  * - XOR (^)
	//  * - negation (!)
	//  * - long, double?
	//  * - bitwise and/or
	//  * - +=, -=, ...
	//  * 
	//  * other notes:
	//  *  - operator precedence is weird
	//  *  - only three scopes: global, file, local; file scope is only used for non-exported global variables
	//  *  - return() requires parentheses (except if not returning anything), and is optional
	//  *  - function arguments require default values
	//  *  - vector() only works for constant arguments
	//  *  - functions must be defined before they are used like in C, forward declarations are done with 'mutable <header> {}'
	//  *  - switch cases don't require a 'break'
	//  * / Program:
	//	declarations+=Declaration*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Declaration:
	//	GlobalVarDeclaration
	//	| FunDeclaration
	//	| IncludeStatement
	//	| RuleDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//IncludeStatement:
	//	'include' filePath=STRING ';' // paths are relative to main directory (e.g. ai2 or trigger2), not to current directory
	//;
	public IncludeStatementElements getIncludeStatementAccess() {
		return pIncludeStatement;
	}
	
	public ParserRule getIncludeStatementRule() {
		return getIncludeStatementAccess().getRule();
	}

	//VarDeclaration:
	//	type=VarTypeSpecifier name=ID '=' value=Expression //no semicolon to enable reuse
	//;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//GlobalVarDeclaration VarDeclaration:
	//	{GlobalVarDeclaration} modifier=VarModifier type=VarTypeSpecifier name=ID '=' value=LiteralOrVar ';'
	public GlobalVarDeclarationElements getGlobalVarDeclarationAccess() {
		return pGlobalVarDeclaration;
	}
	
	public ParserRule getGlobalVarDeclarationRule() {
		return getGlobalVarDeclarationAccess().getRule();
	}

	//VarModifier:
	//	{VarModifier} (const?='const'? & extern?='extern'?);
	public VarModifierElements getVarModifierAccess() {
		return pVarModifier;
	}
	
	public ParserRule getVarModifierRule() {
		return getVarModifierAccess().getRule();
	}

	//ParameterDeclaration VarDeclaration:
	//	type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//ForVarDeclaration VarDeclaration:
	//	name=ID '=' value=Expression
	public ForVarDeclarationElements getForVarDeclarationAccess() {
		return pForVarDeclaration;
	}
	
	public ParserRule getForVarDeclarationRule() {
		return getForVarDeclarationAccess().getRule();
	}

	//FunDeclaration:
	//	modifier=FunModifier type=FunTypeSpecifier name=ID '(' paramlist=Params? ')' statements=CompoundStatement;
	public FunDeclarationElements getFunDeclarationAccess() {
		return pFunDeclaration;
	}
	
	public ParserRule getFunDeclarationRule() {
		return getFunDeclarationAccess().getRule();
	}

	//FunTypeSpecifier:
	//	VoidType
	//	| VarTypeSpecifier;
	public FunTypeSpecifierElements getFunTypeSpecifierAccess() {
		return pFunTypeSpecifier;
	}
	
	public ParserRule getFunTypeSpecifierRule() {
		return getFunTypeSpecifierAccess().getRule();
	}

	//Params:
	//	{Params} 'void'
	//	| params+=ParameterDeclaration (',' params+=ParameterDeclaration)*;
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}

	//RuleDeclaration:
	//	'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'?
	//	& highFrequency?='highFrequency'?
	//	& ('group' group=ID)?
	//	& ('minInterval' minInterval=INT)?
	//	& ('maxInterval' maxInterval=INT)?) statements=CompoundStatement;
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return pRuleDeclaration;
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//FunModifier:
	//	{FunModifier} mutable?='mutable'?;
	public FunModifierElements getFunModifierAccess() {
		return pFunModifier;
	}
	
	public ParserRule getFunModifierRule() {
		return getFunModifierAccess().getRule();
	}

	//VarTypeSpecifier:
	//	IntType
	//	| FloatType
	//	| BoolType
	//	| VectorType
	//	| StringType;
	public VarTypeSpecifierElements getVarTypeSpecifierAccess() {
		return pVarTypeSpecifier;
	}
	
	public ParserRule getVarTypeSpecifierRule() {
		return getVarTypeSpecifierAccess().getRule();
	}

	//CompoundStatement:
	//	{CompoundStatement} '{' contents+=VarDeclarationOrStatement* '}';
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//VarDeclarationOrStatement:
	//	VarDeclaration ';'
	//	| Statement;
	public VarDeclarationOrStatementElements getVarDeclarationOrStatementAccess() {
		return pVarDeclarationOrStatement;
	}
	
	public ParserRule getVarDeclarationOrStatementRule() {
		return getVarDeclarationOrStatementAccess().getRule();
	}

	//Statement:
	//	ExpressionStatement
	//	| PostfixStatement
	//	| CompoundStatement
	//	| IfElseStatement
	//	| WhileStatement
	//	| ForStatement
	//	| SwitchStatement
	//	| ReturnStatement
	//	| ContinueStatement //TODO add some restrictions (inside loop)
	//	| BreakStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ExpressionStatement //typically 1 line, ends in semicolon
	//:
	//	expression=Expression ';';
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//PostfixStatement:
	//	var=[VarDeclaration] op=PostFixOp ';';
	public PostfixStatementElements getPostfixStatementAccess() {
		return pPostfixStatement;
	}
	
	public ParserRule getPostfixStatementRule() {
		return getPostfixStatementAccess().getRule();
	}

	//IfElseStatement:
	//	'if' '(' condition=Expression ')' thenStatement=Statement (=> 'else' elseStatement=Statement)?;
	public IfElseStatementElements getIfElseStatementAccess() {
		return pIfElseStatement;
	}
	
	public ParserRule getIfElseStatementRule() {
		return getIfElseStatementAccess().getRule();
	}

	//WhileStatement:
	//	'while' '(' condition=Expression ')' statement=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	'for' '(' var=ForVarDeclaration ';' op=RelOp expression=Expression ')' statement=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//SwitchStatement:
	//	'switch' '(' var=[VarDeclaration] ')' '{' cases+=SwitchCase* default=SwitchDefault? '}';
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//SwitchCase //TODO check if strings, floats, ... allowed
	//:
	//	'case' var=LiteralNumOrVar ':' statement=Statement;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//SwitchDefault:
	//	'default' ':' statement=Statement;
	public SwitchDefaultElements getSwitchDefaultAccess() {
		return pSwitchDefault;
	}
	
	public ParserRule getSwitchDefaultRule() {
		return getSwitchDefaultAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} 'return' ('(' expression=Expression ')')? ';';
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} 'continue' ';';
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} 'break' ';';
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//PostFixOp:
	//	'++'
	//	| '--';
	public PostFixOpElements getPostFixOpAccess() {
		return pPostFixOp;
	}
	
	public ParserRule getPostFixOpRule() {
		return getPostFixOpAccess().getRule();
	}

	//Expression:
	//	{AssignmentExpression} (var=Var '=' expression=Expression) | expression=SimpleExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Var:
	//	declaration=[VarDeclaration];
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//SimpleExpression Expression:
	//	AndExpression ({Or.left=current} op='||' right=AndExpression)*
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//AndExpression Expression:
	//	EqualsExpression ({And.left=current} op='&&' right=EqualsExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualsExpression Expression:
	//	ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?
	public EqualsExpressionElements getEqualsExpressionAccess() {
		return pEqualsExpression;
	}
	
	public ParserRule getEqualsExpressionRule() {
		return getEqualsExpressionAccess().getRule();
	}

	//EqOp:
	//	'=='
	//	| '!=';
	public EqOpElements getEqOpAccess() {
		return pEqOp;
	}
	
	public ParserRule getEqOpRule() {
		return getEqOpAccess().getRule();
	}

	//ComparisonExpression Expression:
	//	AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//RelOp:
	//	'<='
	//	| '<'
	//	| '>'
	//	| '>=';
	public RelOpElements getRelOpAccess() {
		return pRelOp;
	}
	
	public ParserRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}

	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AddOp:
	//	'+'
	//	| '-';
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}

	//MultiplicativeExpression Expression:
	//	Atom ({Factor.left=current} op=MulOp right=Atom)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MulOp:
	//	'*'
	//	| '/'
	//	| '%' //modulo has same order of operation as multiplication
	//;
	public MulOpElements getMulOpAccess() {
		return pMulOp;
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}

	//Atom Expression:
	//	{PrimaryExpression} ('(' expression=Expression ')') | Call
	//	| LiteralOrVar
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//LiteralOrVar:
	//	Var
	//	| Literal;
	public LiteralOrVarElements getLiteralOrVarAccess() {
		return pLiteralOrVar;
	}
	
	public ParserRule getLiteralOrVarRule() {
		return getLiteralOrVarAccess().getRule();
	}

	//Literal:
	//	LiteralNum
	//	| {LiteralVector} value=Vector
	//	| {LiteralString} value=STRING //TODO concatenation != addition
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//LiteralNum:
	//	{LiteralInt} value=SignedInt
	//	| {LiteralFloat} value=SignedFloat
	//	| {LiteralBool} value=Bool // booleans are treated like ints
	//;
	public LiteralNumElements getLiteralNumAccess() {
		return pLiteralNum;
	}
	
	public ParserRule getLiteralNumRule() {
		return getLiteralNumAccess().getRule();
	}

	//LiteralNumOrVar:
	//	LiteralNum
	//	| Var;
	public LiteralNumOrVarElements getLiteralNumOrVarAccess() {
		return pLiteralNumOrVar;
	}
	
	public ParserRule getLiteralNumOrVarRule() {
		return getLiteralNumOrVarAccess().getRule();
	}

	//Call:
	//	function=[FunDeclaration] '(' args=Arguments? ')';
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Arguments:
	//	expressions+=Expression (',' expressions+=Expression)* //TODO link with params
	//;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//IntType:
	//	{IntType} 'int';
	public IntTypeElements getIntTypeAccess() {
		return pIntType;
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} 'float';
	public FloatTypeElements getFloatTypeAccess() {
		return pFloatType;
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//BoolType:
	//	{BoolType} 'bool';
	public BoolTypeElements getBoolTypeAccess() {
		return pBoolType;
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//VectorType:
	//	{VectorType} 'vector';
	public VectorTypeElements getVectorTypeAccess() {
		return pVectorType;
	}
	
	public ParserRule getVectorTypeRule() {
		return getVectorTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} 'string';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//VoidType:
	//	{VoidType} 'void';
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}

	//Sign:
	//	'-'
	//	//  | '+' //not allowed!
	//;
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//SignedInt ecore::EInt:
	//	Sign? INT
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedFloat ecore::EFloat:
	//	Sign? INT '.' INT
	public SignedFloatElements getSignedFloatAccess() {
		return pSignedFloat;
	}
	
	public ParserRule getSignedFloatRule() {
		return getSignedFloatAccess().getRule();
	}

	//Bool ecore::EBoolean:
	//	'true'
	//	| 'false'
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//Vector:
	//	'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')' //only literals or constants, else use xsVectorSet
	//;
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	'"' ('\\"' | !('"' | '\n'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
