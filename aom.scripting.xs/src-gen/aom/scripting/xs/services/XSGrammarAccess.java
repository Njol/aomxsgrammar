/*
* generated by Xtext
*/
package aom.scripting.xs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		/// *
		//  * NOT supported by XS
		//  * - power a^n
		//  * - ternary b ? x : y;
		//  * - prefix: ++i
		//  * - inline pre/postfix: a + x++
		//  * - unary minus: -x 
		//  * - XOR (^)
		//  * - negation (!)
		//  * - long, double?
		//  * - bitwise and/or
		//  * - +=, -=, ...
		//  * / Program:
		//	declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cFunDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIncludeStatementParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cRuleDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaration:
		//	VarDeclaration ";" | FunDeclaration | IncludeStatement ";" | RuleDeclaration;
		public ParserRule getRule() { return rule; }

		//VarDeclaration ";" | FunDeclaration | IncludeStatement ";" | RuleDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDeclaration ";"
		public Group getGroup_0() { return cGroup_0; }

		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0_0() { return cVarDeclarationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//FunDeclaration
		public RuleCall getFunDeclarationParserRuleCall_1() { return cFunDeclarationParserRuleCall_1; }

		//IncludeStatement ";"
		public Group getGroup_2() { return cGroup_2; }

		//IncludeStatement
		public RuleCall getIncludeStatementParserRuleCall_2_0() { return cIncludeStatementParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//RuleDeclaration
		public RuleCall getRuleDeclarationParserRuleCall_3() { return cRuleDeclarationParserRuleCall_3; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		////  | '+' //not allowed!
		//Sign:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInt returns ecore::EInt:
		//	Sign? INT;
		public ParserRule getRule() { return rule; }

		//Sign? INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SignedFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SignedFloat returns ecore::EFloat:
		//	Sign? INT "." INT;
		public ParserRule getRule() { return rule; }

		//Sign? INT "." INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}

	public class SignedNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignedNum:
		//	SignedInt | SignedFloat;
		public ParserRule getRule() { return rule; }

		//SignedInt | SignedFloat
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignedInt
		public RuleCall getSignedIntParserRuleCall_0() { return cSignedIntParserRuleCall_0; }

		//SignedFloat
		public RuleCall getSignedFloatParserRuleCall_1() { return cSignedFloatParserRuleCall_1; }
	}

	public class ConstantNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantNum");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVarDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVarDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVarDeclarationCrossReference_0.eContents().get(1);
		
		////TODO check const modifier and type
		//ConstantNum:
		//	var=[VarDeclaration];
		public ParserRule getRule() { return rule; }

		//var=[VarDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }

		//[VarDeclaration]
		public CrossReference getVarVarDeclarationCrossReference_0() { return cVarVarDeclarationCrossReference_0; }

		//ID
		public RuleCall getVarVarDeclarationIDTerminalRuleCall_0_1() { return cVarVarDeclarationIDTerminalRuleCall_0_1; }
	}

	public class LiteralOrConstantNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralOrConstantNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSignedNumAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSignedNumParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cConstantNumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralOrConstantNum:
		//	{SignedNum} SignedNum | ConstantNum;
		public ParserRule getRule() { return rule; }

		//{SignedNum} SignedNum | ConstantNum
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SignedNum} SignedNum
		public Group getGroup_0() { return cGroup_0; }

		//{SignedNum}
		public Action getSignedNumAction_0_0() { return cSignedNumAction_0_0; }

		//SignedNum
		public RuleCall getSignedNumParserRuleCall_0_1() { return cSignedNumParserRuleCall_0_1; }

		//ConstantNum
		public RuleCall getConstantNumParserRuleCall_1() { return cConstantNumParserRuleCall_1; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bool returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXLiteralOrConstantNumParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYLiteralOrConstantNumParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZLiteralOrConstantNumParserRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Vector:
		//	"vector" "(" x=LiteralOrConstantNum "," y=LiteralOrConstantNum "," z=LiteralOrConstantNum //only literals or constants, else xsArray...
		//	")";
		public ParserRule getRule() { return rule; }

		//"vector" "(" x=LiteralOrConstantNum "," y=LiteralOrConstantNum "," z=LiteralOrConstantNum //only literals or constants, else xsArray...
		//")"
		public Group getGroup() { return cGroup; }

		//"vector"
		public Keyword getVectorKeyword_0() { return cVectorKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=LiteralOrConstantNum
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//LiteralOrConstantNum
		public RuleCall getXLiteralOrConstantNumParserRuleCall_2_0() { return cXLiteralOrConstantNumParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=LiteralOrConstantNum
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//LiteralOrConstantNum
		public RuleCall getYLiteralOrConstantNumParserRuleCall_4_0() { return cYLiteralOrConstantNumParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//z=LiteralOrConstantNum
		public Assignment getZAssignment_6() { return cZAssignment_6; }

		//LiteralOrConstantNum
		public RuleCall getZLiteralOrConstantNumParserRuleCall_6_0() { return cZLiteralOrConstantNumParserRuleCall_6_0; }

		////only literals or constants, else xsArray...
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierVarModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		////TODO only literals and constant vars
		//VarDeclaration:
		//	modifier=VarModifier type=VarTypeSpecifier name=ID "=" value= //no semicolon to enable reuse
		//	Expression;
		public ParserRule getRule() { return rule; }

		//modifier=VarModifier type=VarTypeSpecifier name=ID "=" value= //no semicolon to enable reuse
		//Expression
		public Group getGroup() { return cGroup; }

		//modifier=VarModifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//VarModifier
		public RuleCall getModifierVarModifierParserRuleCall_0_0() { return cModifierVarModifierParserRuleCall_0_0; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_1_0() { return cTypeVarTypeSpecifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value= //no semicolon to enable reuse
		//Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		////no semicolon to enable reuse
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }
	}

	public class ForVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ForVarDeclaration returns VarDeclaration:
		//	name=ID "=" value= //type='float'
		//	Expression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value= //type='float'
		//Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value= //type='float'
		//Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		////type='float'
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class FunDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierFunModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFunTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamlistAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamlistParamsParserRuleCall_4_0 = (RuleCall)cParamlistAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsCompoundStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		
		//FunDeclaration:
		//	modifier=FunModifier type=FunTypeSpecifier name=ID "(" paramlist=Params? ")" statements=CompoundStatement;
		public ParserRule getRule() { return rule; }

		//modifier=FunModifier type=FunTypeSpecifier name=ID "(" paramlist=Params? ")" statements=CompoundStatement
		public Group getGroup() { return cGroup; }

		//modifier=FunModifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//FunModifier
		public RuleCall getModifierFunModifierParserRuleCall_0_0() { return cModifierFunModifierParserRuleCall_0_0; }

		//type=FunTypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//FunTypeSpecifier
		public RuleCall getTypeFunTypeSpecifierParserRuleCall_1_0() { return cTypeFunTypeSpecifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//paramlist=Params?
		public Assignment getParamlistAssignment_4() { return cParamlistAssignment_4; }

		//Params
		public RuleCall getParamlistParamsParserRuleCall_4_0() { return cParamlistParamsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//statements=CompoundStatement
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//CompoundStatement
		public RuleCall getStatementsCompoundStatementParserRuleCall_6_0() { return cStatementsCompoundStatementParserRuleCall_6_0; }
	}

	public class IncludeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IncludeStatement:
		//	"include" name=STRING;
		public ParserRule getRule() { return rule; }

		//"include" name=STRING
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cUnorderedGroup_2.eContents().get(0);
		private final Assignment cActiveAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final Keyword cActiveActiveKeyword_2_0_0_0 = (Keyword)cActiveAssignment_2_0_0.eContents().get(0);
		private final Keyword cInactiveKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cRunImmediatelyAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cRunImmediatelyRunImmediatelyKeyword_2_1_0 = (Keyword)cRunImmediatelyAssignment_2_1.eContents().get(0);
		private final Assignment cHighFrequencyAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cHighFrequencyHighFrequencyKeyword_2_2_0 = (Keyword)cHighFrequencyAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cGroupKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cGroupAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cGroupIDTerminalRuleCall_2_3_1_0 = (RuleCall)cGroupAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cMinIntervalKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cMinIntervalAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cMinIntervalINTTerminalRuleCall_2_4_1_0 = (RuleCall)cMinIntervalAssignment_2_4_1.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cMaxIntervalKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cMaxIntervalAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cMaxIntervalINTTerminalRuleCall_2_5_1_0 = (RuleCall)cMaxIntervalAssignment_2_5_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsCompoundStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//RuleDeclaration:
		//	"rule" name=ID ((active?="active" | "inactive") & runImmediately?="runImmediately"? & highFrequency?="highFrequency"?
		//	& ("group" group=ID)? & ("minInterval" minInterval=INT)? & ("maxInterval" maxInterval=INT)?)
		//	statements=CompoundStatement;
		public ParserRule getRule() { return rule; }

		//"rule" name=ID ((active?="active" | "inactive") & runImmediately?="runImmediately"? & highFrequency?="highFrequency"? &
		//("group" group=ID)? & ("minInterval" minInterval=INT)? & ("maxInterval" maxInterval=INT)?)
		//statements=CompoundStatement
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(active?="active" | "inactive") & runImmediately?="runImmediately"? & highFrequency?="highFrequency"? & ("group"
		//group=ID)? & ("minInterval" minInterval=INT)? & ("maxInterval" maxInterval=INT)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//active?="active" | "inactive"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//active?="active"
		public Assignment getActiveAssignment_2_0_0() { return cActiveAssignment_2_0_0; }

		//"active"
		public Keyword getActiveActiveKeyword_2_0_0_0() { return cActiveActiveKeyword_2_0_0_0; }

		//"inactive"
		public Keyword getInactiveKeyword_2_0_1() { return cInactiveKeyword_2_0_1; }

		//runImmediately?="runImmediately"?
		public Assignment getRunImmediatelyAssignment_2_1() { return cRunImmediatelyAssignment_2_1; }

		//"runImmediately"
		public Keyword getRunImmediatelyRunImmediatelyKeyword_2_1_0() { return cRunImmediatelyRunImmediatelyKeyword_2_1_0; }

		//highFrequency?="highFrequency"?
		public Assignment getHighFrequencyAssignment_2_2() { return cHighFrequencyAssignment_2_2; }

		//"highFrequency"
		public Keyword getHighFrequencyHighFrequencyKeyword_2_2_0() { return cHighFrequencyHighFrequencyKeyword_2_2_0; }

		//("group" group=ID)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"group"
		public Keyword getGroupKeyword_2_3_0() { return cGroupKeyword_2_3_0; }

		//group=ID
		public Assignment getGroupAssignment_2_3_1() { return cGroupAssignment_2_3_1; }

		//ID
		public RuleCall getGroupIDTerminalRuleCall_2_3_1_0() { return cGroupIDTerminalRuleCall_2_3_1_0; }

		//("minInterval" minInterval=INT)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"minInterval"
		public Keyword getMinIntervalKeyword_2_4_0() { return cMinIntervalKeyword_2_4_0; }

		//minInterval=INT
		public Assignment getMinIntervalAssignment_2_4_1() { return cMinIntervalAssignment_2_4_1; }

		//INT
		public RuleCall getMinIntervalINTTerminalRuleCall_2_4_1_0() { return cMinIntervalINTTerminalRuleCall_2_4_1_0; }

		//("maxInterval" maxInterval=INT)?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//"maxInterval"
		public Keyword getMaxIntervalKeyword_2_5_0() { return cMaxIntervalKeyword_2_5_0; }

		//maxInterval=INT
		public Assignment getMaxIntervalAssignment_2_5_1() { return cMaxIntervalAssignment_2_5_1; }

		//INT
		public RuleCall getMaxIntervalINTTerminalRuleCall_2_5_1_0() { return cMaxIntervalINTTerminalRuleCall_2_5_1_0; }

		//statements=CompoundStatement
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//CompoundStatement
		public RuleCall getStatementsCompoundStatementParserRuleCall_3_0() { return cStatementsCompoundStatementParserRuleCall_3_0; }
	}

	public class VarModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarModifier");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cConstConstKeyword_1_0 = (Keyword)cConstAssignment_1.eContents().get(0);
		private final Assignment cExternAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final Keyword cExternExternKeyword_2_0 = (Keyword)cExternAssignment_2.eContents().get(0);
		
		//VarModifier:
		//	static?="static"? & const?="const"? & extern?="extern"?;
		public ParserRule getRule() { return rule; }

		//static?="static"? & const?="const"? & extern?="extern"?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//const?="const"?
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }

		//"const"
		public Keyword getConstConstKeyword_1_0() { return cConstConstKeyword_1_0; }

		//extern?="extern"?
		public Assignment getExternAssignment_2() { return cExternAssignment_2; }

		//"extern"
		public Keyword getExternExternKeyword_2_0() { return cExternExternKeyword_2_0; }
	}

	public class FunModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunModifier");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cMutableMutableKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		
		//FunModifier:
		//	static?="static"? & mutable?="mutable"?;
		public ParserRule getRule() { return rule; }

		//static?="static"? & mutable?="mutable"?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//mutable?="mutable"?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }

		//"mutable"
		public Keyword getMutableMutableKeyword_1_0() { return cMutableMutableKeyword_1_0; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} "int";
		public ParserRule getRule() { return rule; }

		//{IntType} "int"
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} "float";
		public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolType:
		//	{BoolType} "bool";
		public ParserRule getRule() { return rule; }

		//{BoolType} "bool"
		public Group getGroup() { return cGroup; }

		//{BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class VectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VectorType:
		//	{VectorType} "vector";
		public ParserRule getRule() { return rule; }

		//{VectorType} "vector"
		public Group getGroup() { return cGroup; }

		//{VectorType}
		public Action getVectorTypeAction_0() { return cVectorTypeAction_0; }

		//"vector"
		public Keyword getVectorKeyword_1() { return cVectorKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} "string";
		public ParserRule getRule() { return rule; }

		//{StringType} "string"
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidType:
		//	{VoidType} "void";
		public ParserRule getRule() { return rule; }

		//{VoidType} "void"
		public Group getGroup() { return cGroup; }

		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class VarTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVectorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VarTypeSpecifier:
		//	IntType | FloatType | BoolType | VectorType | StringType;
		public ParserRule getRule() { return rule; }

		//IntType | FloatType | BoolType | VectorType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_1() { return cFloatTypeParserRuleCall_1; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_2() { return cBoolTypeParserRuleCall_2; }

		//VectorType
		public RuleCall getVectorTypeParserRuleCall_3() { return cVectorTypeParserRuleCall_3; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
	}

	public class FunTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunTypeSpecifier:
		//	VoidType | VarTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//VoidType | VarTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }

		//VarTypeSpecifier
		public RuleCall getVarTypeSpecifierParserRuleCall_1() { return cVarTypeSpecifierParserRuleCall_1; }
	}

	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Params");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cParamVoidKeyword_0_0 = (Keyword)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamsVarDeclarationParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsVarDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		
		//Params:
		//	param="void" | params+=VarDeclaration ("," params+=VarDeclaration)*;
		public ParserRule getRule() { return rule; }

		//param="void" | params+=VarDeclaration ("," params+=VarDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//param="void"
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//"void"
		public Keyword getParamVoidKeyword_0_0() { return cParamVoidKeyword_0_0; }

		//params+=VarDeclaration ("," params+=VarDeclaration)*
		public Group getGroup_1() { return cGroup_1; }

		//params+=VarDeclaration
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }

		//VarDeclaration
		public RuleCall getParamsVarDeclarationParserRuleCall_1_0_0() { return cParamsVarDeclarationParserRuleCall_1_0_0; }

		//("," params+=VarDeclaration)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//params+=VarDeclaration
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }

		//VarDeclaration
		public RuleCall getParamsVarDeclarationParserRuleCall_1_1_1_0() { return cParamsVarDeclarationParserRuleCall_1_1_1_0; }
	}

	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsVarDeclarationOrStatementParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundStatement:
		//	{CompoundStatement} "{" contents+=VarDeclarationOrStatement* "}";
		public ParserRule getRule() { return rule; }

		//{CompoundStatement} "{" contents+=VarDeclarationOrStatement* "}"
		public Group getGroup() { return cGroup; }

		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//contents+=VarDeclarationOrStatement*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }

		//VarDeclarationOrStatement
		public RuleCall getContentsVarDeclarationOrStatementParserRuleCall_2_0() { return cContentsVarDeclarationOrStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VarDeclarationOrStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclarationOrStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVarDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDeclarationOrStatement:
		//	VarDeclaration ";" | Statement;
		public ParserRule getRule() { return rule; }

		//VarDeclaration ";" | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDeclaration ";"
		public Group getGroup_0() { return cGroup_0; }

		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0_0() { return cVarDeclarationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfElseStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBreakStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement:
		//	ExpressionStatement | CompoundStatement | IfElseStatement | WhileStatement | ForStatement | SwitchStatement |
		//	ReturnStatement | //TODO add some restrictions (inside loop)
		//	ContinueStatement | BreakStatement;
		public ParserRule getRule() { return rule; }

		//ExpressionStatement | CompoundStatement | IfElseStatement | WhileStatement | ForStatement | SwitchStatement |
		//ReturnStatement | //TODO add some restrictions (inside loop)
		//ContinueStatement | BreakStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }

		//IfElseStatement
		public RuleCall getIfElseStatementParserRuleCall_2() { return cIfElseStatementParserRuleCall_2; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_5() { return cSwitchStatementParserRuleCall_5; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_6() { return cReturnStatementParserRuleCall_6; }

		////TODO add some restrictions (inside loop)
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_7() { return cContinueStatementParserRuleCall_7; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_8() { return cBreakStatementParserRuleCall_8; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEmptyExpressionStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		////typically 1 line, ends in semicolon
		//ExpressionStatement:
		//	expression=Expression ";" | {EmptyExpressionStatement} ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";" | {EmptyExpressionStatement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression=Expression ";"
		public Group getGroup_0() { return cGroup_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_0() { return cExpressionExpressionParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//{EmptyExpressionStatement} ";"
		public Group getGroup_1() { return cGroup_1; }

		//{EmptyExpressionStatement}
		public Action getEmptyExpressionStatementAction_1_0() { return cEmptyExpressionStatementAction_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class IfElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfStatementStatementParserRuleCall_4_0 = (RuleCall)cIfStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfElseStatement:
		//	"if" "(" condition=Expression ")" ifStatement=Statement ("else" elseStatement=Statement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" condition=Expression ")" ifStatement=Statement ("else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//ifStatement=Statement
		public Assignment getIfStatementAssignment_4() { return cIfStatementAssignment_4; }

		//Statement
		public RuleCall getIfStatementStatementParserRuleCall_4_0() { return cIfStatementStatementParserRuleCall_4_0; }

		//(=> "else" elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	"while" "(" condition=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"while" "(" condition=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarForVarDeclarationParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpRelOpParserRuleCall_4_0 = (RuleCall)cOpAssignment_4.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" var=ForVarDeclaration ";" op=RelOp expression=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"for" "(" var=ForVarDeclaration ";" op=RelOp expression=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=ForVarDeclaration
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ForVarDeclaration
		public RuleCall getVarForVarDeclarationParserRuleCall_2_0() { return cVarForVarDeclarationParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//op=RelOp
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_4_0() { return cOpRelOpParserRuleCall_4_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//statement=Statement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_0() { return cStatementStatementParserRuleCall_7_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarVarDeclarationCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarVarDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVarVarDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCasesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCasesSwitchCaseParserRuleCall_5_0 = (RuleCall)cCasesAssignment_5.eContents().get(0);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultSwitchDefaultParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatement:
		//	"switch" "(" var=[VarDeclaration] ")" "{" cases+=SwitchCase* default=SwitchDefault? "}";
		public ParserRule getRule() { return rule; }

		//"switch" "(" var=[VarDeclaration] ")" "{" cases+=SwitchCase* default=SwitchDefault? "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//var=[VarDeclaration]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//[VarDeclaration]
		public CrossReference getVarVarDeclarationCrossReference_2_0() { return cVarVarDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getVarVarDeclarationIDTerminalRuleCall_2_0_1() { return cVarVarDeclarationIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//cases+=SwitchCase*
		public Assignment getCasesAssignment_5() { return cCasesAssignment_5; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_5_0() { return cCasesSwitchCaseParserRuleCall_5_0; }

		//default=SwitchDefault?
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//SwitchDefault
		public RuleCall getDefaultSwitchDefaultParserRuleCall_6_0() { return cDefaultSwitchDefaultParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarLiteralOrConstantNumParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////TODO check if strings, floats, ... allowed
		//SwitchCase:
		//	"case" var=LiteralOrConstantNum ":" "{" statement=Statement "}";
		public ParserRule getRule() { return rule; }

		//"case" var=LiteralOrConstantNum ":" "{" statement=Statement "}"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//var=LiteralOrConstantNum
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//LiteralOrConstantNum
		public RuleCall getVarLiteralOrConstantNumParserRuleCall_1_0() { return cVarLiteralOrConstantNumParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SwitchDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SwitchDefault:
		//	"default" ":" "{" statement=Statement "}";
		public ParserRule getRule() { return rule; }

		//"default" ":" "{" statement=Statement "}"
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	{ReturnStatement} "return" ("(" expression=Expression ")")? ";";
		public ParserRule getRule() { return rule; }

		//{ReturnStatement} "return" ("(" expression=Expression ")")? ";"
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//("(" expression=Expression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	{ContinueStatement} "continue" ";";
		public ParserRule getRule() { return rule; }

		//{ContinueStatement} "continue" ";"
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	{BreakStatement} "break" ";";
		public ParserRule getRule() { return rule; }

		//{BreakStatement} "break" ";"
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PostFixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostFixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PostFixOp:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cVarAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_1_0_0 = (RuleCall)cVarAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_2_0 = (RuleCall)cExpressionAssignment_0_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPostfixExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cPostfixVarAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cPostfixVarVarDeclarationCrossReference_2_1_0 = (CrossReference)cPostfixVarAssignment_2_1.eContents().get(0);
		private final RuleCall cPostfixVarVarDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cPostfixVarVarDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Assignment cOpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOpPostFixOpParserRuleCall_2_2_0 = (RuleCall)cOpAssignment_2_2.eContents().get(0);
		
		//Expression:
		//	{AssignmentExpression} (var=Var "=" expression=Expression) | expression=SimpleExpression | {PostfixExpression}
		//	postfixVar=[VarDeclaration] op= //only as separate Expression, not mixed with SimpleExpression
		//	PostFixOp;
		public ParserRule getRule() { return rule; }

		//{AssignmentExpression} (var=Var "=" expression=Expression) | expression=SimpleExpression | {PostfixExpression}
		//postfixVar=[VarDeclaration] op= //only as separate Expression, not mixed with SimpleExpression
		//PostFixOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AssignmentExpression} (var=Var "=" expression=Expression)
		public Group getGroup_0() { return cGroup_0; }

		//{AssignmentExpression}
		public Action getAssignmentExpressionAction_0_0() { return cAssignmentExpressionAction_0_0; }

		//var=Var "=" expression=Expression
		public Group getGroup_0_1() { return cGroup_0_1; }

		//var=Var
		public Assignment getVarAssignment_0_1_0() { return cVarAssignment_0_1_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_1_0_0() { return cVarVarParserRuleCall_0_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_2() { return cExpressionAssignment_0_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_2_0() { return cExpressionExpressionParserRuleCall_0_1_2_0; }

		//expression=SimpleExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SimpleExpression
		public RuleCall getExpressionSimpleExpressionParserRuleCall_1_0() { return cExpressionSimpleExpressionParserRuleCall_1_0; }

		//{PostfixExpression} postfixVar=[VarDeclaration] op= //only as separate Expression, not mixed with SimpleExpression
		//PostFixOp
		public Group getGroup_2() { return cGroup_2; }

		//{PostfixExpression}
		public Action getPostfixExpressionAction_2_0() { return cPostfixExpressionAction_2_0; }

		//postfixVar=[VarDeclaration]
		public Assignment getPostfixVarAssignment_2_1() { return cPostfixVarAssignment_2_1; }

		//[VarDeclaration]
		public CrossReference getPostfixVarVarDeclarationCrossReference_2_1_0() { return cPostfixVarVarDeclarationCrossReference_2_1_0; }

		//ID
		public RuleCall getPostfixVarVarDeclarationIDTerminalRuleCall_2_1_0_1() { return cPostfixVarVarDeclarationIDTerminalRuleCall_2_1_0_1; }

		//op= //only as separate Expression, not mixed with SimpleExpression
		//PostFixOp
		public Assignment getOpAssignment_2_2() { return cOpAssignment_2_2; }

		////only as separate Expression, not mixed with SimpleExpression
		//PostFixOp
		public RuleCall getOpPostFixOpParserRuleCall_2_2_0() { return cOpPostFixOpParserRuleCall_2_2_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameVarDeclarationCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameVarDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cNameVarDeclarationCrossReference_0.eContents().get(1);
		
		//Var:
		//	name=[VarDeclaration];
		public ParserRule getRule() { return rule; }

		//name=[VarDeclaration]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[VarDeclaration]
		public CrossReference getNameVarDeclarationCrossReference_0() { return cNameVarDeclarationCrossReference_0; }

		//ID
		public RuleCall getNameVarDeclarationIDTerminalRuleCall_0_1() { return cNameVarDeclarationIDTerminalRuleCall_0_1; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleExpression returns Expression:
		//	AndExpression ({Or.left=current} op="||" right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression ({Or.left=current} op="||" right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({Or.left=current} op="||" right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//op="||"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualsExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//	EqualsExpression ({And.left=current} op="&&" right=EqualsExpression)*;
		public ParserRule getRule() { return rule; }

		//EqualsExpression ({And.left=current} op="&&" right=EqualsExpression)*
		public Group getGroup() { return cGroup; }

		//EqualsExpression
		public RuleCall getEqualsExpressionParserRuleCall_0() { return cEqualsExpressionParserRuleCall_0; }

		//({And.left=current} op="&&" right=EqualsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//op="&&"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }

		//right=EqualsExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualsExpression
		public RuleCall getRightEqualsExpressionParserRuleCall_1_2_0() { return cRightEqualsExpressionParserRuleCall_1_2_0; }
	}

	public class EqualsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEqOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualsExpression returns Expression:
		//	ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?;
		public ParserRule getRule() { return rule; }

		//ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup() { return cGroup; }

		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }

		//({Equals.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0() { return cEqualsLeftAction_1_0; }

		//op=EqOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EqOp
		public RuleCall getOpEqOpParserRuleCall_1_1_0() { return cOpEqOpParserRuleCall_1_1_0; }

		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}

	public class EqOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqOp:
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression returns Expression:
		//	AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({Comparison.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=RelOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_1_1_0() { return cOpRelOpParserRuleCall_1_1_0; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class RelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelOp:
		//	"<=" | "<" | ">" | ">=";
		public ParserRule getRule() { return rule; }

		//"<=" | "<" | ">" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAddOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }

		//op=AddOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//AddOp
		public RuleCall getOpAddOpParserRuleCall_1_1_0() { return cOpAddOpParserRuleCall_1_1_0; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AddOp:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMulOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	Atom ({Factor.left=current} op=MulOp right=Atom)*;
		public ParserRule getRule() { return rule; }

		//Atom ({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup() { return cGroup; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup_1() { return cGroup_1; }

		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }

		//op=MulOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MulOp
		public RuleCall getOpMulOpParserRuleCall_1_1_0() { return cOpMulOpParserRuleCall_1_1_0; }

		//right=Atom
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atom
		public RuleCall getRightAtomParserRuleCall_1_2_0() { return cRightAtomParserRuleCall_1_2_0; }
	}

	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MulOp:
		//	"*" | "/" | //modulo has same order of operation as multiplication
		//	"%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | //modulo has same order of operation as multiplication
		//"%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		////modulo has same order of operation as multiplication
		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionVarParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionCallParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLiteralIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLiteralFloatAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSignedFloatParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cLiteralBoolAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBoolParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cLiteralVectorAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueVectorParserRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cLiteralStringAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		
		//Atom returns Expression:
		//	{PrimaryExpression} ("(" expression=Expression ")") | expression=Var | expression=Call | {LiteralInt} value=SignedInt
		//	| {LiteralFloat} value=SignedFloat | {LiteralBool} value=Bool | {LiteralVector} value=Vector | {LiteralString} value= //TODO concatenation != addition
		//	STRING;
		public ParserRule getRule() { return rule; }

		//{PrimaryExpression} ("(" expression=Expression ")") | expression=Var | expression=Call | {LiteralInt} value=SignedInt |
		//{LiteralFloat} value=SignedFloat | {LiteralBool} value=Bool | {LiteralVector} value=Vector | {LiteralString} value= //TODO concatenation != addition
		//STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PrimaryExpression} ("(" expression=Expression ")")
		public Group getGroup_0() { return cGroup_0; }

		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0_0() { return cPrimaryExpressionAction_0_0; }

		//"(" expression=Expression ")"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//expression=Var
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Var
		public RuleCall getExpressionVarParserRuleCall_1_0() { return cExpressionVarParserRuleCall_1_0; }

		//expression=Call
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Call
		public RuleCall getExpressionCallParserRuleCall_2_0() { return cExpressionCallParserRuleCall_2_0; }

		//{LiteralInt} value=SignedInt
		public Group getGroup_3() { return cGroup_3; }

		//{LiteralInt}
		public Action getLiteralIntAction_3_0() { return cLiteralIntAction_3_0; }

		//value=SignedInt
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_3_1_0() { return cValueSignedIntParserRuleCall_3_1_0; }

		//{LiteralFloat} value=SignedFloat
		public Group getGroup_4() { return cGroup_4; }

		//{LiteralFloat}
		public Action getLiteralFloatAction_4_0() { return cLiteralFloatAction_4_0; }

		//value=SignedFloat
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//SignedFloat
		public RuleCall getValueSignedFloatParserRuleCall_4_1_0() { return cValueSignedFloatParserRuleCall_4_1_0; }

		//{LiteralBool} value=Bool
		public Group getGroup_5() { return cGroup_5; }

		//{LiteralBool}
		public Action getLiteralBoolAction_5_0() { return cLiteralBoolAction_5_0; }

		//value=Bool
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//Bool
		public RuleCall getValueBoolParserRuleCall_5_1_0() { return cValueBoolParserRuleCall_5_1_0; }

		//{LiteralVector} value=Vector
		public Group getGroup_6() { return cGroup_6; }

		//{LiteralVector}
		public Action getLiteralVectorAction_6_0() { return cLiteralVectorAction_6_0; }

		//value=Vector
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//Vector
		public RuleCall getValueVectorParserRuleCall_6_1_0() { return cValueVectorParserRuleCall_6_1_0; }

		//{LiteralString} value= //TODO concatenation != addition
		//STRING
		public Group getGroup_7() { return cGroup_7; }

		//{LiteralString}
		public Action getLiteralStringAction_7_0() { return cLiteralStringAction_7_0; }

		//value= //TODO concatenation != addition
		//STRING
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }

		////TODO concatenation != addition
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_7_1_0() { return cValueSTRINGTerminalRuleCall_7_1_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunDeclarationCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Call:
		//	function=[FunDeclaration] "(" args=Arguments? ")";
		public ParserRule getRule() { return rule; }

		//function=[FunDeclaration] "(" args=Arguments? ")"
		public Group getGroup() { return cGroup; }

		//function=[FunDeclaration]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//[FunDeclaration]
		public CrossReference getFunctionFunDeclarationCrossReference_0_0() { return cFunctionFunDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getFunctionFunDeclarationIDTerminalRuleCall_0_0_1() { return cFunctionFunDeclarationIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args=Arguments?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_2_0() { return cArgsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Arguments:
		//	expressions+=Expression ("," expressions+=Expression)* //TODO link with params
		//;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ("," expressions+=Expression)* //TODO link with params
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}
	
	
	private ProgramElements pProgram;
	private DeclarationElements pDeclaration;
	private SignElements pSign;
	private SignedIntElements pSignedInt;
	private SignedFloatElements pSignedFloat;
	private SignedNumElements pSignedNum;
	private ConstantNumElements pConstantNum;
	private LiteralOrConstantNumElements pLiteralOrConstantNum;
	private BoolElements pBool;
	private VectorElements pVector;
	private VarDeclarationElements pVarDeclaration;
	private ForVarDeclarationElements pForVarDeclaration;
	private FunDeclarationElements pFunDeclaration;
	private IncludeStatementElements pIncludeStatement;
	private RuleDeclarationElements pRuleDeclaration;
	private VarModifierElements pVarModifier;
	private FunModifierElements pFunModifier;
	private IntTypeElements pIntType;
	private FloatTypeElements pFloatType;
	private BoolTypeElements pBoolType;
	private VectorTypeElements pVectorType;
	private StringTypeElements pStringType;
	private VoidTypeElements pVoidType;
	private VarTypeSpecifierElements pVarTypeSpecifier;
	private FunTypeSpecifierElements pFunTypeSpecifier;
	private ParamsElements pParams;
	private CompoundStatementElements pCompoundStatement;
	private VarDeclarationOrStatementElements pVarDeclarationOrStatement;
	private StatementElements pStatement;
	private ExpressionStatementElements pExpressionStatement;
	private IfElseStatementElements pIfElseStatement;
	private WhileStatementElements pWhileStatement;
	private ForStatementElements pForStatement;
	private SwitchStatementElements pSwitchStatement;
	private SwitchCaseElements pSwitchCase;
	private SwitchDefaultElements pSwitchDefault;
	private ReturnStatementElements pReturnStatement;
	private ContinueStatementElements pContinueStatement;
	private BreakStatementElements pBreakStatement;
	private PostFixOpElements pPostFixOp;
	private ExpressionElements pExpression;
	private VarElements pVar;
	private SimpleExpressionElements pSimpleExpression;
	private AndExpressionElements pAndExpression;
	private EqualsExpressionElements pEqualsExpression;
	private EqOpElements pEqOp;
	private ComparisonExpressionElements pComparisonExpression;
	private RelOpElements pRelOp;
	private AdditiveExpressionElements pAdditiveExpression;
	private AddOpElements pAddOp;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private MulOpElements pMulOp;
	private AtomElements pAtom;
	private CallElements pCall;
	private ArgumentsElements pArguments;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("aom.scripting.xs.XS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	//  * NOT supported by XS
	//  * - power a^n
	//  * - ternary b ? x : y;
	//  * - prefix: ++i
	//  * - inline pre/postfix: a + x++
	//  * - unary minus: -x 
	//  * - XOR (^)
	//  * - negation (!)
	//  * - long, double?
	//  * - bitwise and/or
	//  * - +=, -=, ...
	//  * / Program:
	//	declarations+=Declaration*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Declaration:
	//	VarDeclaration ";" | FunDeclaration | IncludeStatement ";" | RuleDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	////  | '+' //not allowed!
	//Sign:
	//	"-";
	public SignElements getSignAccess() {
		return (pSign != null) ? pSign : (pSign = new SignElements());
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//SignedInt returns ecore::EInt:
	//	Sign? INT;
	public SignedIntElements getSignedIntAccess() {
		return (pSignedInt != null) ? pSignedInt : (pSignedInt = new SignedIntElements());
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedFloat returns ecore::EFloat:
	//	Sign? INT "." INT;
	public SignedFloatElements getSignedFloatAccess() {
		return (pSignedFloat != null) ? pSignedFloat : (pSignedFloat = new SignedFloatElements());
	}
	
	public ParserRule getSignedFloatRule() {
		return getSignedFloatAccess().getRule();
	}

	//SignedNum:
	//	SignedInt | SignedFloat;
	public SignedNumElements getSignedNumAccess() {
		return (pSignedNum != null) ? pSignedNum : (pSignedNum = new SignedNumElements());
	}
	
	public ParserRule getSignedNumRule() {
		return getSignedNumAccess().getRule();
	}

	////TODO check const modifier and type
	//ConstantNum:
	//	var=[VarDeclaration];
	public ConstantNumElements getConstantNumAccess() {
		return (pConstantNum != null) ? pConstantNum : (pConstantNum = new ConstantNumElements());
	}
	
	public ParserRule getConstantNumRule() {
		return getConstantNumAccess().getRule();
	}

	//LiteralOrConstantNum:
	//	{SignedNum} SignedNum | ConstantNum;
	public LiteralOrConstantNumElements getLiteralOrConstantNumAccess() {
		return (pLiteralOrConstantNum != null) ? pLiteralOrConstantNum : (pLiteralOrConstantNum = new LiteralOrConstantNumElements());
	}
	
	public ParserRule getLiteralOrConstantNumRule() {
		return getLiteralOrConstantNumAccess().getRule();
	}

	//Bool returns ecore::EBoolean:
	//	"true" | "false";
	public BoolElements getBoolAccess() {
		return (pBool != null) ? pBool : (pBool = new BoolElements());
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//Vector:
	//	"vector" "(" x=LiteralOrConstantNum "," y=LiteralOrConstantNum "," z=LiteralOrConstantNum //only literals or constants, else xsArray...
	//	")";
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	////TODO only literals and constant vars
	//VarDeclaration:
	//	modifier=VarModifier type=VarTypeSpecifier name=ID "=" value= //no semicolon to enable reuse
	//	Expression;
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//ForVarDeclaration returns VarDeclaration:
	//	name=ID "=" value= //type='float'
	//	Expression;
	public ForVarDeclarationElements getForVarDeclarationAccess() {
		return (pForVarDeclaration != null) ? pForVarDeclaration : (pForVarDeclaration = new ForVarDeclarationElements());
	}
	
	public ParserRule getForVarDeclarationRule() {
		return getForVarDeclarationAccess().getRule();
	}

	//FunDeclaration:
	//	modifier=FunModifier type=FunTypeSpecifier name=ID "(" paramlist=Params? ")" statements=CompoundStatement;
	public FunDeclarationElements getFunDeclarationAccess() {
		return (pFunDeclaration != null) ? pFunDeclaration : (pFunDeclaration = new FunDeclarationElements());
	}
	
	public ParserRule getFunDeclarationRule() {
		return getFunDeclarationAccess().getRule();
	}

	//IncludeStatement:
	//	"include" name=STRING;
	public IncludeStatementElements getIncludeStatementAccess() {
		return (pIncludeStatement != null) ? pIncludeStatement : (pIncludeStatement = new IncludeStatementElements());
	}
	
	public ParserRule getIncludeStatementRule() {
		return getIncludeStatementAccess().getRule();
	}

	//RuleDeclaration:
	//	"rule" name=ID ((active?="active" | "inactive") & runImmediately?="runImmediately"? & highFrequency?="highFrequency"?
	//	& ("group" group=ID)? & ("minInterval" minInterval=INT)? & ("maxInterval" maxInterval=INT)?)
	//	statements=CompoundStatement;
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return (pRuleDeclaration != null) ? pRuleDeclaration : (pRuleDeclaration = new RuleDeclarationElements());
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//VarModifier:
	//	static?="static"? & const?="const"? & extern?="extern"?;
	public VarModifierElements getVarModifierAccess() {
		return (pVarModifier != null) ? pVarModifier : (pVarModifier = new VarModifierElements());
	}
	
	public ParserRule getVarModifierRule() {
		return getVarModifierAccess().getRule();
	}

	//FunModifier:
	//	static?="static"? & mutable?="mutable"?;
	public FunModifierElements getFunModifierAccess() {
		return (pFunModifier != null) ? pFunModifier : (pFunModifier = new FunModifierElements());
	}
	
	public ParserRule getFunModifierRule() {
		return getFunModifierAccess().getRule();
	}

	//IntType:
	//	{IntType} "int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} "float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//BoolType:
	//	{BoolType} "bool";
	public BoolTypeElements getBoolTypeAccess() {
		return (pBoolType != null) ? pBoolType : (pBoolType = new BoolTypeElements());
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//VectorType:
	//	{VectorType} "vector";
	public VectorTypeElements getVectorTypeAccess() {
		return (pVectorType != null) ? pVectorType : (pVectorType = new VectorTypeElements());
	}
	
	public ParserRule getVectorTypeRule() {
		return getVectorTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//VoidType:
	//	{VoidType} "void";
	public VoidTypeElements getVoidTypeAccess() {
		return (pVoidType != null) ? pVoidType : (pVoidType = new VoidTypeElements());
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}

	//VarTypeSpecifier:
	//	IntType | FloatType | BoolType | VectorType | StringType;
	public VarTypeSpecifierElements getVarTypeSpecifierAccess() {
		return (pVarTypeSpecifier != null) ? pVarTypeSpecifier : (pVarTypeSpecifier = new VarTypeSpecifierElements());
	}
	
	public ParserRule getVarTypeSpecifierRule() {
		return getVarTypeSpecifierAccess().getRule();
	}

	//FunTypeSpecifier:
	//	VoidType | VarTypeSpecifier;
	public FunTypeSpecifierElements getFunTypeSpecifierAccess() {
		return (pFunTypeSpecifier != null) ? pFunTypeSpecifier : (pFunTypeSpecifier = new FunTypeSpecifierElements());
	}
	
	public ParserRule getFunTypeSpecifierRule() {
		return getFunTypeSpecifierAccess().getRule();
	}

	//Params:
	//	param="void" | params+=VarDeclaration ("," params+=VarDeclaration)*;
	public ParamsElements getParamsAccess() {
		return (pParams != null) ? pParams : (pParams = new ParamsElements());
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}

	//CompoundStatement:
	//	{CompoundStatement} "{" contents+=VarDeclarationOrStatement* "}";
	public CompoundStatementElements getCompoundStatementAccess() {
		return (pCompoundStatement != null) ? pCompoundStatement : (pCompoundStatement = new CompoundStatementElements());
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//VarDeclarationOrStatement:
	//	VarDeclaration ";" | Statement;
	public VarDeclarationOrStatementElements getVarDeclarationOrStatementAccess() {
		return (pVarDeclarationOrStatement != null) ? pVarDeclarationOrStatement : (pVarDeclarationOrStatement = new VarDeclarationOrStatementElements());
	}
	
	public ParserRule getVarDeclarationOrStatementRule() {
		return getVarDeclarationOrStatementAccess().getRule();
	}

	//Statement:
	//	ExpressionStatement | CompoundStatement | IfElseStatement | WhileStatement | ForStatement | SwitchStatement |
	//	ReturnStatement | //TODO add some restrictions (inside loop)
	//	ContinueStatement | BreakStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////typically 1 line, ends in semicolon
	//ExpressionStatement:
	//	expression=Expression ";" | {EmptyExpressionStatement} ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//IfElseStatement:
	//	"if" "(" condition=Expression ")" ifStatement=Statement ("else" elseStatement=Statement)?;
	public IfElseStatementElements getIfElseStatementAccess() {
		return (pIfElseStatement != null) ? pIfElseStatement : (pIfElseStatement = new IfElseStatementElements());
	}
	
	public ParserRule getIfElseStatementRule() {
		return getIfElseStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condition=Expression ")" statement=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" var=ForVarDeclaration ";" op=RelOp expression=Expression ")" statement=Statement;
	public ForStatementElements getForStatementAccess() {
		return (pForStatement != null) ? pForStatement : (pForStatement = new ForStatementElements());
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//SwitchStatement:
	//	"switch" "(" var=[VarDeclaration] ")" "{" cases+=SwitchCase* default=SwitchDefault? "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return (pSwitchStatement != null) ? pSwitchStatement : (pSwitchStatement = new SwitchStatementElements());
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	////TODO check if strings, floats, ... allowed
	//SwitchCase:
	//	"case" var=LiteralOrConstantNum ":" "{" statement=Statement "}";
	public SwitchCaseElements getSwitchCaseAccess() {
		return (pSwitchCase != null) ? pSwitchCase : (pSwitchCase = new SwitchCaseElements());
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//SwitchDefault:
	//	"default" ":" "{" statement=Statement "}";
	public SwitchDefaultElements getSwitchDefaultAccess() {
		return (pSwitchDefault != null) ? pSwitchDefault : (pSwitchDefault = new SwitchDefaultElements());
	}
	
	public ParserRule getSwitchDefaultRule() {
		return getSwitchDefaultAccess().getRule();
	}

	//ReturnStatement:
	//	{ReturnStatement} "return" ("(" expression=Expression ")")? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return (pContinueStatement != null) ? pContinueStatement : (pContinueStatement = new ContinueStatementElements());
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public BreakStatementElements getBreakStatementAccess() {
		return (pBreakStatement != null) ? pBreakStatement : (pBreakStatement = new BreakStatementElements());
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//PostFixOp:
	//	"++" | "--";
	public PostFixOpElements getPostFixOpAccess() {
		return (pPostFixOp != null) ? pPostFixOp : (pPostFixOp = new PostFixOpElements());
	}
	
	public ParserRule getPostFixOpRule() {
		return getPostFixOpAccess().getRule();
	}

	//Expression:
	//	{AssignmentExpression} (var=Var "=" expression=Expression) | expression=SimpleExpression | {PostfixExpression}
	//	postfixVar=[VarDeclaration] op= //only as separate Expression, not mixed with SimpleExpression
	//	PostFixOp;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Var:
	//	name=[VarDeclaration];
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//SimpleExpression returns Expression:
	//	AndExpression ({Or.left=current} op="||" right=AndExpression)*;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return (pSimpleExpression != null) ? pSimpleExpression : (pSimpleExpression = new SimpleExpressionElements());
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	EqualsExpression ({And.left=current} op="&&" right=EqualsExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualsExpression returns Expression:
	//	ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?;
	public EqualsExpressionElements getEqualsExpressionAccess() {
		return (pEqualsExpression != null) ? pEqualsExpression : (pEqualsExpression = new EqualsExpressionElements());
	}
	
	public ParserRule getEqualsExpressionRule() {
		return getEqualsExpressionAccess().getRule();
	}

	//EqOp:
	//	"==" | "!=";
	public EqOpElements getEqOpAccess() {
		return (pEqOp != null) ? pEqOp : (pEqOp = new EqOpElements());
	}
	
	public ParserRule getEqOpRule() {
		return getEqOpAccess().getRule();
	}

	//ComparisonExpression returns Expression:
	//	AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return (pComparisonExpression != null) ? pComparisonExpression : (pComparisonExpression = new ComparisonExpressionElements());
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//RelOp:
	//	"<=" | "<" | ">" | ">=";
	public RelOpElements getRelOpAccess() {
		return (pRelOp != null) ? pRelOp : (pRelOp = new RelOpElements());
	}
	
	public ParserRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AddOp:
	//	"+" | "-";
	public AddOpElements getAddOpAccess() {
		return (pAddOp != null) ? pAddOp : (pAddOp = new AddOpElements());
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	Atom ({Factor.left=current} op=MulOp right=Atom)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MulOp:
	//	"*" | "/" | //modulo has same order of operation as multiplication
	//	"%";
	public MulOpElements getMulOpAccess() {
		return (pMulOp != null) ? pMulOp : (pMulOp = new MulOpElements());
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}

	//Atom returns Expression:
	//	{PrimaryExpression} ("(" expression=Expression ")") | expression=Var | expression=Call | {LiteralInt} value=SignedInt
	//	| {LiteralFloat} value=SignedFloat | {LiteralBool} value=Bool | {LiteralVector} value=Vector | {LiteralString} value= //TODO concatenation != addition
	//	STRING;
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//Call:
	//	function=[FunDeclaration] "(" args=Arguments? ")";
	public CallElements getCallAccess() {
		return (pCall != null) ? pCall : (pCall = new CallElements());
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Arguments:
	//	expressions+=Expression ("," expressions+=Expression)* //TODO link with params
	//;
	public ArgumentsElements getArgumentsAccess() {
		return (pArguments != null) ? pArguments : (pArguments = new ArgumentsElements());
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
