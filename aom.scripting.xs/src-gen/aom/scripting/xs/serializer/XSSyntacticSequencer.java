/*
 * generated by Xtext
 */
package aom.scripting.xs.serializer;

import aom.scripting.xs.services.XSGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class XSSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XSGrammarAccess grammarAccess;
	protected AbstractElementAlias match_RuleDeclaration_InactiveKeyword_2_0_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XSGrammarAccess) access;
		match_RuleDeclaration_InactiveKeyword_2_0_1_a = new TokenAlias(true, true, grammarAccess.getRuleDeclarationAccess().getInactiveKeyword_2_0_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_RuleDeclaration_InactiveKeyword_2_0_1_a.equals(syntax))
				emit_RuleDeclaration_InactiveKeyword_2_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'inactive'*
	 *
	 * This ambiguous syntax occurs at:
	 *     active?='active' (ambiguity) 'group' group=ID
	 *     active?='active' (ambiguity) 'maxInterval' maxInterval=INT
	 *     active?='active' (ambiguity) 'minInterval' minInterval=INT
	 *     active?='active' (ambiguity) active?='active'
	 *     active?='active' (ambiguity) highFrequency?='highFrequency'
	 *     active?='active' (ambiguity) runImmediately?='runImmediately'
	 *     active?='active' (ambiguity) statements=CompoundStatement
	 *     group=ID (ambiguity) 'group' group=ID
	 *     group=ID (ambiguity) 'maxInterval' maxInterval=INT
	 *     group=ID (ambiguity) 'minInterval' minInterval=INT
	 *     group=ID (ambiguity) active?='active'
	 *     group=ID (ambiguity) highFrequency?='highFrequency'
	 *     group=ID (ambiguity) runImmediately?='runImmediately'
	 *     group=ID (ambiguity) statements=CompoundStatement
	 *     highFrequency?='highFrequency' (ambiguity) 'group' group=ID
	 *     highFrequency?='highFrequency' (ambiguity) 'maxInterval' maxInterval=INT
	 *     highFrequency?='highFrequency' (ambiguity) 'minInterval' minInterval=INT
	 *     highFrequency?='highFrequency' (ambiguity) active?='active'
	 *     highFrequency?='highFrequency' (ambiguity) highFrequency?='highFrequency'
	 *     highFrequency?='highFrequency' (ambiguity) runImmediately?='runImmediately'
	 *     highFrequency?='highFrequency' (ambiguity) statements=CompoundStatement
	 *     maxInterval=INT (ambiguity) 'group' group=ID
	 *     maxInterval=INT (ambiguity) 'maxInterval' maxInterval=INT
	 *     maxInterval=INT (ambiguity) 'minInterval' minInterval=INT
	 *     maxInterval=INT (ambiguity) active?='active'
	 *     maxInterval=INT (ambiguity) highFrequency?='highFrequency'
	 *     maxInterval=INT (ambiguity) runImmediately?='runImmediately'
	 *     maxInterval=INT (ambiguity) statements=CompoundStatement
	 *     minInterval=INT (ambiguity) 'group' group=ID
	 *     minInterval=INT (ambiguity) 'maxInterval' maxInterval=INT
	 *     minInterval=INT (ambiguity) 'minInterval' minInterval=INT
	 *     minInterval=INT (ambiguity) active?='active'
	 *     minInterval=INT (ambiguity) highFrequency?='highFrequency'
	 *     minInterval=INT (ambiguity) runImmediately?='runImmediately'
	 *     minInterval=INT (ambiguity) statements=CompoundStatement
	 *     name=ID (ambiguity) 'group' group=ID
	 *     name=ID (ambiguity) 'maxInterval' maxInterval=INT
	 *     name=ID (ambiguity) 'minInterval' minInterval=INT
	 *     name=ID (ambiguity) active?='active'
	 *     name=ID (ambiguity) highFrequency?='highFrequency'
	 *     name=ID (ambiguity) runImmediately?='runImmediately'
	 *     name=ID (ambiguity) statements=CompoundStatement
	 *     runImmediately?='runImmediately' (ambiguity) 'group' group=ID
	 *     runImmediately?='runImmediately' (ambiguity) 'maxInterval' maxInterval=INT
	 *     runImmediately?='runImmediately' (ambiguity) 'minInterval' minInterval=INT
	 *     runImmediately?='runImmediately' (ambiguity) active?='active'
	 *     runImmediately?='runImmediately' (ambiguity) highFrequency?='highFrequency'
	 *     runImmediately?='runImmediately' (ambiguity) runImmediately?='runImmediately'
	 *     runImmediately?='runImmediately' (ambiguity) statements=CompoundStatement
	 */
	protected void emit_RuleDeclaration_InactiveKeyword_2_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
