/*
* generated by Xtext
*/
grammar InternalXS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package aom.scripting.xs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package aom.scripting.xs.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import aom.scripting.xs.services.XSGrammarAccess;

}

@parser::members {

 	private XSGrammarAccess grammarAccess;
 	
    public InternalXSParser(TokenStream input, XSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected XSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_0()); 
	    }
		lv_declarations_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclarationParserRuleCall_0_0()); 
    }
    this_VarDeclaration_0=ruleVarDeclaration
    { 
        $current = $this_VarDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationAccess().getSemicolonKeyword_0_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getFunDeclarationParserRuleCall_1()); 
    }
    this_FunDeclaration_2=ruleFunDeclaration
    { 
        $current = $this_FunDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getIncludeStatementParserRuleCall_2_0()); 
    }
    this_IncludeStatement_3=ruleIncludeStatement
    { 
        $current = $this_IncludeStatement_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeclarationAccess().getSemicolonKeyword_2_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getRuleDeclarationParserRuleCall_3()); 
    }
    this_RuleDeclaration_5=ruleRuleDeclaration
    { 
        $current = $this_RuleDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSign
entryRuleSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current.getText(); }  
	 EOF 
;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); } 
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current.getText(); }  
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSignedIntAccess().getSignParserRuleCall_0()); 
    }
    this_Sign_0=ruleSign    {
		$current.merge(this_Sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSignedFloat
entryRuleSignedFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedFloatRule()); } 
	 iv_ruleSignedFloat=ruleSignedFloat 
	 { $current=$iv_ruleSignedFloat.current.getText(); }  
	 EOF 
;

// Rule SignedFloat
ruleSignedFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSignedFloatAccess().getSignParserRuleCall_0()); 
    }
    this_Sign_0=ruleSign    {
		$current.merge(this_Sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_1()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedFloatAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleSignedNum
entryRuleSignedNum returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedNumRule()); } 
	 iv_ruleSignedNum=ruleSignedNum 
	 { $current=$iv_ruleSignedNum.current.getText(); }  
	 EOF 
;

// Rule SignedNum
ruleSignedNum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSignedNumAccess().getSignedIntParserRuleCall_0()); 
    }
    this_SignedInt_0=ruleSignedInt    {
		$current.merge(this_SignedInt_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSignedNumAccess().getSignedFloatParserRuleCall_1()); 
    }
    this_SignedFloat_1=ruleSignedFloat    {
		$current.merge(this_SignedFloat_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConstantNum
entryRuleConstantNum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantNumRule()); }
	 iv_ruleConstantNum=ruleConstantNum 
	 { $current=$iv_ruleConstantNum.current; } 
	 EOF 
;

// Rule ConstantNum
ruleConstantNum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantNumRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantNumAccess().getVarVarDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleLiteralOrConstantNum
entryRuleLiteralOrConstantNum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralOrConstantNumRule()); }
	 iv_ruleLiteralOrConstantNum=ruleLiteralOrConstantNum 
	 { $current=$iv_ruleLiteralOrConstantNum.current; } 
	 EOF 
;

// Rule LiteralOrConstantNum
ruleLiteralOrConstantNum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralOrConstantNumAccess().getSignedNumAction_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getLiteralOrConstantNumAccess().getSignedNumParserRuleCall_0_1()); 
    }
ruleSignedNum
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLiteralOrConstantNumAccess().getConstantNumParserRuleCall_1()); 
    }
    this_ConstantNum_2=ruleConstantNum
    { 
        $current = $this_ConstantNum_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBool
entryRuleBool returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolRule()); } 
	 iv_ruleBool=ruleBool 
	 { $current=$iv_ruleBool.current.getText(); }  
	 EOF 
;

// Rule Bool
ruleBool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='vector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getVectorKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVectorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getXLiteralOrConstantNumParserRuleCall_2_0()); 
	    }
		lv_x_2_0=ruleLiteralOrConstantNum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_2_0, 
        		"LiteralOrConstantNum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVectorAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getYLiteralOrConstantNumParserRuleCall_4_0()); 
	    }
		lv_y_4_0=ruleLiteralOrConstantNum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_4_0, 
        		"LiteralOrConstantNum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVectorAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getZLiteralOrConstantNumParserRuleCall_6_0()); 
	    }
		lv_z_6_0=ruleLiteralOrConstantNum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_6_0, 
        		"LiteralOrConstantNum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVectorAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	 iv_ruleVarDeclaration=ruleVarDeclaration 
	 { $current=$iv_ruleVarDeclaration.current; } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationAccess().getModifierVarModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleVarModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"VarModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleVarTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"VarTypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDeclarationAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationAccess().getValueExpressionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForVarDeclaration
entryRuleForVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForVarDeclarationRule()); }
	 iv_ruleForVarDeclaration=ruleForVarDeclaration 
	 { $current=$iv_ruleForVarDeclaration.current; } 
	 EOF 
;

// Rule ForVarDeclaration
ruleForVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getForVarDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForVarDeclarationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForVarDeclarationAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunDeclaration
entryRuleFunDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunDeclarationRule()); }
	 iv_ruleFunDeclaration=ruleFunDeclaration 
	 { $current=$iv_ruleFunDeclaration.current; } 
	 EOF 
;

// Rule FunDeclaration
ruleFunDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclarationAccess().getModifierFunModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleFunModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclarationRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"FunModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclarationAccess().getTypeFunTypeSpecifierParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleFunTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"FunTypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunDeclarationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclarationAccess().getParamlistParamsParserRuleCall_4_0()); 
	    }
		lv_paramlist_4_0=ruleParams		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclarationRule());
	        }
       		set(
       			$current, 
       			"paramlist",
        		lv_paramlist_4_0, 
        		"Params");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunDeclarationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclarationAccess().getStatementsCompoundStatementParserRuleCall_6_0()); 
	    }
		lv_statements_6_0=ruleCompoundStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclarationRule());
	        }
       		set(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"CompoundStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIncludeStatement
entryRuleIncludeStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeStatementRule()); }
	 iv_ruleIncludeStatement=ruleIncludeStatement 
	 { $current=$iv_ruleIncludeStatement.current; } 
	 EOF 
;

// Rule IncludeStatement
ruleIncludeStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIncludeStatementAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDeclarationRule()); }
	 iv_ruleRuleDeclaration=ruleRuleDeclaration 
	 { $current=$iv_ruleRuleDeclaration.current; } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleDeclarationAccess().getRuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>((
(
		lv_active_3_0=	'active' 
    {
        newLeafNode(lv_active_3_0, grammarAccess.getRuleDeclarationAccess().getActiveActiveKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "active", true, "active");
	    }

)
)
    |	otherlv_4='inactive' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleDeclarationAccess().getInactiveKeyword_2_0_1());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(
(
		lv_runImmediately_5_0=	'runImmediately' 
    {
        newLeafNode(lv_runImmediately_5_0, grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "runImmediately", true, "runImmediately");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 2);
	 				}
					({true}?=>(
(
		lv_highFrequency_6_0=	'highFrequency' 
    {
        newLeafNode(lv_highFrequency_6_0, grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_2_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed($current, "highFrequency", true, "highFrequency");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 3);
	 				}
					({true}?=>(	otherlv_7='group' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuleDeclarationAccess().getGroupKeyword_2_3_0());
    }
(
(
		lv_group_8_0=RULE_ID
		{
			newLeafNode(lv_group_8_0, grammarAccess.getRuleDeclarationAccess().getGroupIDTerminalRuleCall_2_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"group",
        		lv_group_8_0, 
        		"ID");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 4);
	 				}
					({true}?=>(	otherlv_9='minInterval' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRuleDeclarationAccess().getMinIntervalKeyword_2_4_0());
    }
(
(
		lv_minInterval_10_0=RULE_INT
		{
			newLeafNode(lv_minInterval_10_0, grammarAccess.getRuleDeclarationAccess().getMinIntervalINTTerminalRuleCall_2_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minInterval",
        		lv_minInterval_10_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 5)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 5);
	 				}
					({true}?=>(	otherlv_11='maxInterval' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRuleDeclarationAccess().getMaxIntervalKeyword_2_5_0());
    }
(
(
		lv_maxInterval_12_0=RULE_INT
		{
			newLeafNode(lv_maxInterval_12_0, grammarAccess.getRuleDeclarationAccess().getMaxIntervalINTTerminalRuleCall_2_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"maxInterval",
        		lv_maxInterval_12_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	}

)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDeclarationAccess().getStatementsCompoundStatementParserRuleCall_3_0()); 
	    }
		lv_statements_13_0=ruleCompoundStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"statements",
        		lv_statements_13_0, 
        		"CompoundStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVarModifier
entryRuleVarModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarModifierRule()); }
	 iv_ruleVarModifier=ruleVarModifier 
	 { $current=$iv_ruleVarModifier.current; } 
	 EOF 
;

// Rule VarModifier
ruleVarModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getVarModifierAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarModifierRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		lv_const_2_0=	'const' 
    {
        newLeafNode(lv_const_2_0, grammarAccess.getVarModifierAccess().getConstConstKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarModifierRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 2);
	 				}
					({true}?=>(
(
		lv_extern_3_0=	'extern' 
    {
        newLeafNode(lv_extern_3_0, grammarAccess.getVarModifierAccess().getExternExternKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarModifierRule());
	        }
       		setWithLastConsumed($current, "extern", true, "extern");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleFunModifier
entryRuleFunModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunModifierRule()); }
	 iv_ruleFunModifier=ruleFunModifier 
	 { $current=$iv_ruleFunModifier.current; } 
	 EOF 
;

// Rule FunModifier
ruleFunModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getFunModifierAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunModifierRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		lv_mutable_2_0=	'mutable' 
    {
        newLeafNode(lv_mutable_2_0, grammarAccess.getFunModifierAccess().getMutableMutableKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunModifierRule());
	        }
       		setWithLastConsumed($current, "mutable", true, "mutable");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntTypeRule()); }
	 iv_ruleIntType=ruleIntType 
	 { $current=$iv_ruleIntType.current; } 
	 EOF 
;

// Rule IntType
ruleIntType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntTypeAccess().getIntTypeAction_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntTypeAccess().getIntKeyword_1());
    }
)
;





// Entry rule entryRuleFloatType
entryRuleFloatType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatTypeRule()); }
	 iv_ruleFloatType=ruleFloatType 
	 { $current=$iv_ruleFloatType.current; } 
	 EOF 
;

// Rule FloatType
ruleFloatType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFloatTypeAccess().getFloatTypeAction_0(),
            $current);
    }
)	otherlv_1='float' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloatTypeAccess().getFloatKeyword_1());
    }
)
;





// Entry rule entryRuleBoolType
entryRuleBoolType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolTypeRule()); }
	 iv_ruleBoolType=ruleBoolType 
	 { $current=$iv_ruleBoolType.current; } 
	 EOF 
;

// Rule BoolType
ruleBoolType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoolTypeAccess().getBoolTypeAction_0(),
            $current);
    }
)	otherlv_1='bool' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoolTypeAccess().getBoolKeyword_1());
    }
)
;





// Entry rule entryRuleVectorType
entryRuleVectorType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorTypeRule()); }
	 iv_ruleVectorType=ruleVectorType 
	 { $current=$iv_ruleVectorType.current; } 
	 EOF 
;

// Rule VectorType
ruleVectorType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVectorTypeAccess().getVectorTypeAction_0(),
            $current);
    }
)	otherlv_1='vector' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVectorTypeAccess().getVectorKeyword_1());
    }
)
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
            $current);
    }
)	otherlv_1='string' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringTypeAccess().getStringKeyword_1());
    }
)
;





// Entry rule entryRuleVoidType
entryRuleVoidType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidTypeRule()); }
	 iv_ruleVoidType=ruleVoidType 
	 { $current=$iv_ruleVoidType.current; } 
	 EOF 
;

// Rule VoidType
ruleVoidType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVoidTypeAccess().getVoidTypeAction_0(),
            $current);
    }
)	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVoidTypeAccess().getVoidKeyword_1());
    }
)
;





// Entry rule entryRuleVarTypeSpecifier
entryRuleVarTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarTypeSpecifierRule()); }
	 iv_ruleVarTypeSpecifier=ruleVarTypeSpecifier 
	 { $current=$iv_ruleVarTypeSpecifier.current; } 
	 EOF 
;

// Rule VarTypeSpecifier
ruleVarTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVarTypeSpecifierAccess().getIntTypeParserRuleCall_0()); 
    }
    this_IntType_0=ruleIntType
    { 
        $current = $this_IntType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarTypeSpecifierAccess().getFloatTypeParserRuleCall_1()); 
    }
    this_FloatType_1=ruleFloatType
    { 
        $current = $this_FloatType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarTypeSpecifierAccess().getBoolTypeParserRuleCall_2()); 
    }
    this_BoolType_2=ruleBoolType
    { 
        $current = $this_BoolType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarTypeSpecifierAccess().getVectorTypeParserRuleCall_3()); 
    }
    this_VectorType_3=ruleVectorType
    { 
        $current = $this_VectorType_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarTypeSpecifierAccess().getStringTypeParserRuleCall_4()); 
    }
    this_StringType_4=ruleStringType
    { 
        $current = $this_StringType_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunTypeSpecifier
entryRuleFunTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunTypeSpecifierRule()); }
	 iv_ruleFunTypeSpecifier=ruleFunTypeSpecifier 
	 { $current=$iv_ruleFunTypeSpecifier.current; } 
	 EOF 
;

// Rule FunTypeSpecifier
ruleFunTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunTypeSpecifierAccess().getVoidTypeParserRuleCall_0()); 
    }
    this_VoidType_0=ruleVoidType
    { 
        $current = $this_VoidType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunTypeSpecifierAccess().getVarTypeSpecifierParserRuleCall_1()); 
    }
    this_VarTypeSpecifier_1=ruleVarTypeSpecifier
    { 
        $current = $this_VarTypeSpecifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	 iv_ruleParams=ruleParams 
	 { $current=$iv_ruleParams.current; } 
	 EOF 
;

// Rule Params
ruleParams returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_param_0_0=	'void' 
    {
        newLeafNode(lv_param_0_0, grammarAccess.getParamsAccess().getParamVoidKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamsRule());
	        }
       		setWithLastConsumed($current, "param", lv_param_0_0, "void");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_params_1_0=ruleVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"VarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParamsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_1_1_0()); 
	    }
		lv_params_3_0=ruleVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"VarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); }
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current; } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundStatementAccess().getContentsVarDeclarationOrStatementParserRuleCall_2_0()); 
	    }
		lv_contents_2_0=ruleVarDeclarationOrStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundStatementRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_2_0, 
        		"VarDeclarationOrStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleVarDeclarationOrStatement
entryRuleVarDeclarationOrStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationOrStatementRule()); }
	 iv_ruleVarDeclarationOrStatement=ruleVarDeclarationOrStatement 
	 { $current=$iv_ruleVarDeclarationOrStatement.current; } 
	 EOF 
;

// Rule VarDeclarationOrStatement
ruleVarDeclarationOrStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getVarDeclarationOrStatementAccess().getVarDeclarationParserRuleCall_0_0()); 
    }
    this_VarDeclaration_0=ruleVarDeclaration
    { 
        $current = $this_VarDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclarationOrStatementAccess().getSemicolonKeyword_0_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getVarDeclarationOrStatementAccess().getStatementParserRuleCall_1()); 
    }
    this_Statement_2=ruleStatement
    { 
        $current = $this_Statement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); 
    }
    this_ExpressionStatement_0=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_1()); 
    }
    this_CompoundStatement_1=ruleCompoundStatement
    { 
        $current = $this_CompoundStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_2()); 
    }
    this_IfElseStatement_2=ruleIfElseStatement
    { 
        $current = $this_IfElseStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); 
    }
    this_WhileStatement_3=ruleWhileStatement
    { 
        $current = $this_WhileStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); 
    }
    this_ForStatement_4=ruleForStatement
    { 
        $current = $this_ForStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_5()); 
    }
    this_SwitchStatement_5=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); 
    }
    this_ReturnStatement_6=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); 
    }
    this_ContinueStatement_7=ruleContinueStatement
    { 
        $current = $this_ContinueStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); 
    }
    this_BreakStatement_8=ruleBreakStatement
    { 
        $current = $this_BreakStatement_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionStatementAccess().getEmptyExpressionStatementAction_1_0(),
            $current);
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1());
    }
))
;





// Entry rule entryRuleIfElseStatement
entryRuleIfElseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfElseStatementRule()); }
	 iv_ruleIfElseStatement=ruleIfElseStatement 
	 { $current=$iv_ruleIfElseStatement.current; } 
	 EOF 
;

// Rule IfElseStatement
ruleIfElseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfElseStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfElseStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfElseStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseStatementAccess().getIfStatementStatementParserRuleCall_4_0()); 
	    }
		lv_ifStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
	        }
       		set(
       			$current, 
       			"ifStatement",
        		lv_ifStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfElseStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfElseStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfElseStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getVarForVarDeclarationParserRuleCall_2_0()); 
	    }
		lv_var_2_0=ruleForVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ForVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getOpRelOpParserRuleCall_4_0()); 
	    }
		lv_op_4_0=ruleRelOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"RelOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_7_0()); 
	    }
		lv_statement_7_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_7_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitchStatementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSwitchStatementAccess().getVarVarDeclarationCrossReference_2_0()); 
	}

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesSwitchCaseParserRuleCall_5_0()); 
	    }
		lv_cases_5_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_5_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getDefaultSwitchDefaultParserRuleCall_6_0()); 
	    }
		lv_default_6_0=ruleSwitchDefault		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_6_0, 
        		"SwitchDefault");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	 iv_ruleSwitchCase=ruleSwitchCase 
	 { $current=$iv_ruleSwitchCase.current; } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchCaseAccess().getVarLiteralOrConstantNumParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleLiteralOrConstantNum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"LiteralOrConstantNum");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchCaseAccess().getColonKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSwitchDefault
entryRuleSwitchDefault returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchDefaultRule()); }
	 iv_ruleSwitchDefault=ruleSwitchDefault 
	 { $current=$iv_ruleSwitchDefault.current; } 
	 EOF 
;

// Rule SwitchDefault
ruleSwitchDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchDefaultAccess().getDefaultKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchDefaultAccess().getColonKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchDefaultAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchDefaultAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchDefaultRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchDefaultAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReturnStatementAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
            $current);
    }
)	otherlv_1='continue' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePostFixOp
entryRulePostFixOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostFixOpRule()); } 
	 iv_rulePostFixOp=rulePostFixOp 
	 { $current=$iv_rulePostFixOp.current.getText(); }  
	 EOF 
;

// Rule PostFixOp
rulePostFixOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPostFixOpAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPostFixOpAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getAssignmentExpressionAction_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getVarVarParserRuleCall_0_1_0_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getEqualsSignKeyword_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getPostfixExpressionAction_2_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getPostfixVarVarDeclarationCrossReference_2_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOpPostFixOpParserRuleCall_2_2_0()); 
	    }
		lv_op_7_0=rulePostFixOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_7_0, 
        		"PostFixOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVarAccess().getNameVarDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current; } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSimpleExpressionAccess().getOrLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualsExpressionParserRuleCall_0()); 
    }
    this_EqualsExpression_0=ruleEqualsExpression
    { 
        $current = $this_EqualsExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightEqualsExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEqualsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualsExpression
entryRuleEqualsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualsExpressionRule()); }
	 iv_ruleEqualsExpression=ruleEqualsExpression 
	 { $current=$iv_ruleEqualsExpression.current; } 
	 EOF 
;

// Rule EqualsExpression
ruleEqualsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualsExpressionAccess().getComparisonExpressionParserRuleCall_0()); 
    }
    this_ComparisonExpression_0=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualsExpressionAccess().getEqualsLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsExpressionAccess().getOpEqOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleEqOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"EqOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualsExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparisonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualsExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ComparisonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEqOp
entryRuleEqOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqOpRule()); } 
	 iv_ruleEqOp=ruleEqOp 
	 { $current=$iv_ruleEqOp.current.getText(); }  
	 EOF 
;

// Rule EqOp
ruleEqOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqOpAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEqOpAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonExpressionAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOpRelOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleRelOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelOp
entryRuleRelOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelOpRule()); } 
	 iv_ruleRelOp=ruleRelOp 
	 { $current=$iv_ruleRelOp.current.getText(); }  
	 EOF 
;

// Rule RelOp
ruleRelOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpAccess().getLessThanSignEqualsSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getTermLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAddOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleAddOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"AddOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddOp
entryRuleAddOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddOpRule()); } 
	 iv_ruleAddOp=ruleAddOp 
	 { $current=$iv_ruleAddOp.current.getText(); }  
	 EOF 
;

// Rule AddOp
ruleAddOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getAtomParserRuleCall_0()); 
    }
    this_Atom_0=ruleAtom
    { 
        $current = $this_Atom_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getFactorLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMulOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleMulOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"MulOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightAtomParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMulOp
entryRuleMulOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulOpRule()); } 
	 iv_ruleMulOp=ruleMulOp 
	 { $current=$iv_ruleMulOp.current.getText(); }  
	 EOF 
;

// Rule MulOp
ruleMulOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMulOpAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMulOpAccess().getSolidusKeyword_1()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMulOpAccess().getPercentSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getPrimaryExpressionAction_0_0(),
            $current);
    }
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_0_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_1_2());
    }
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getExpressionVarParserRuleCall_1_0()); 
	    }
		lv_expression_4_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getExpressionCallParserRuleCall_2_0()); 
	    }
		lv_expression_5_0=ruleCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Call");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getLiteralIntAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getValueSignedIntParserRuleCall_3_1_0()); 
	    }
		lv_value_7_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getLiteralFloatAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getValueSignedFloatParserRuleCall_4_1_0()); 
	    }
		lv_value_9_0=ruleSignedFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"SignedFloat");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getLiteralBoolAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getValueBoolParserRuleCall_5_1_0()); 
	    }
		lv_value_11_0=ruleBool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_11_0, 
        		"Bool");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getLiteralVectorAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getValueVectorParserRuleCall_6_1_0()); 
	    }
		lv_value_13_0=ruleVector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_13_0, 
        		"Vector");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomAccess().getLiteralStringAction_7_0(),
            $current);
    }
)(
(
		lv_value_15_0=RULE_STRING
		{
			newLeafNode(lv_value_15_0, grammarAccess.getAtomAccess().getValueSTRINGTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_15_0, 
        		"STRING");
	    }

)
)))
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getCallAccess().getFunctionFunDeclarationCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getArgsArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


