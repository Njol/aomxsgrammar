grammar aom.scripting.xs.XS with org.eclipse.xtext.common.Terminals //xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate xs "http://aom.eso.com/xs"

 /*
  * NOT supported by XS
  * - power a^n
  * - ternary b ? x : y;
  * - prefix: ++i
  * - inline pre/postfix: a + x++
  * - unary minus: -x 
  * - XOR (^)
  * - negation (!)
  * - long, double?
  * - bitwise and/or
  * - +=, -=, ...
  */

Program
	: declarations += Declaration*
	;
	
Declaration
	: VarDeclaration ';'
	| FunDeclaration
	| IncludeStatement ';'
	| RuleDeclaration
	;

Sign
	: '-'
//  | '+' //not allowed!
	;
	
SignedInt returns ecore::EInt
	: Sign? INT
	;
		
SignedFloat returns ecore::EFloat
	: Sign? INT '.' INT
	;
	
SignedNum
	: SignedInt
	| SignedFloat
	;
	
ConstantNum //TODO check const modifier and type
	: var=[VarDeclaration]
	;
	
LiteralOrConstantNum
	: {SignedNum} SignedNum
	| ConstantNum
	;
	
Bool returns ecore::EBoolean
	: 'true'
	| 'false'
	;
	
Vector
	: 'vector' '(' x=LiteralOrConstantNum ',' y=LiteralOrConstantNum ',' z=LiteralOrConstantNum ')' //only literals or constants, else xsArray...
	;

VarDeclaration //TODO only literals and constant vars
	: modifier=VarModifier type=VarTypeSpecifier name=ID '=' value=Expression //no semicolon to enable reuse
	;
	
ForVarDeclaration returns VarDeclaration
	: name=ID '=' value=Expression //type='float'
	;

FunDeclaration
	: modifier=FunModifier type=FunTypeSpecifier name=ID '(' paramlist=Params? ')' statements=CompoundStatement
	;
	
IncludeStatement
	: 'include' name=STRING
	;
	
RuleDeclaration
	: 'rule' name=ID (
			(active?= 'active'|'inactive')
			& runImmediately?='runImmediately'?
			& highFrequency?='highFrequency'? 
			& ('group' group=ID)? 
			& ('minInterval' minInterval=INT)? 
			& ('maxInterval' maxInterval=INT)?
		)
		statements=CompoundStatement
	;

VarModifier
	: static?='static'? & const?='const'? & extern?='extern'?
	;
	
FunModifier
	: static?='static'? & mutable?='mutable'?
	;

IntType
	: {IntType} 'int'
	;
	
FloatType
	: {FloatType} 'float'
	;
	
BoolType
	: {BoolType} 'bool'
	;
	
VectorType
	: {VectorType} 'vector'
	;
	
StringType
	: {StringType} 'string'
	;
	
VoidType
	: {VoidType} 'void'
	;
	
VarTypeSpecifier
	: IntType
	| FloatType
	| BoolType
	| VectorType
	| StringType
	;
	
FunTypeSpecifier
	: VoidType
	| VarTypeSpecifier
	;
	
Params
	: param = 'void'
	| params += VarDeclaration (',' params += VarDeclaration)*
	;
	
CompoundStatement
	: {CompoundStatement} '{' contents += (VarDeclarationOrStatement)* '}'
	;
	
VarDeclarationOrStatement
	: VarDeclaration ';'
	| Statement
	;
		
Statement
	: ExpressionStatement
    | CompoundStatement
	| IfElseStatement
	| WhileStatement
	| ForStatement
	| SwitchStatement
	| ReturnStatement
	| ContinueStatement //TODO add some restrictions (inside loop)
	| BreakStatement 
	;
	
ExpressionStatement //typically 1 line, ends in semicolon
	: expression = Expression ';' 
	| {EmptyExpressionStatement} ';'
	;
	
IfElseStatement
	: 'if' '(' condition = Expression ')' ifStatement = Statement (=>'else' elseStatement=Statement)?
	;
	
WhileStatement
	: 'while' '(' condition = Expression ')' statement = Statement
	;
	
ForStatement
	: 'for' '(' var=ForVarDeclaration ';' op = RelOp expression = Expression ')' statement = Statement
	;
	
SwitchStatement
	: 'switch' '(' var=[VarDeclaration] ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
	;
	
SwitchCase //TODO check if strings, floats, ... allowed
	: 'case' var=LiteralOrConstantNum ':' '{' statement=Statement'}'
	;
	
SwitchDefault
	: 'default' ':' '{' statement=Statement '}'
	;

ReturnStatement
	: {ReturnStatement} 'return' ('(' expression = Expression ')')? ';'
	;
	
ContinueStatement
	: {ContinueStatement} 'continue' ';'
	;
	
BreakStatement
	: {BreakStatement} 'break' ';'
	;

PostFixOp
	: '++'
	| '--'
	;

Expression
	: {AssignmentExpression} (var = Var '=' expression = Expression)
	| expression = SimpleExpression
	| {PostfixExpression} postfixVar = [VarDeclaration] op=PostFixOp //only as separate Expression, not mixed with SimpleExpression
	;
	
Var
	: name=[VarDeclaration]
	;
	
SimpleExpression returns Expression
	: AndExpression ({Or.left=current} op='||' right=AndExpression)*
	;
	
AndExpression returns Expression
	: EqualsExpression ({And.left=current} op='&&' right=EqualsExpression)*
	;

EqualsExpression returns Expression
	: ComparisonExpression ({Equals.left=current} op=EqOp right=ComparisonExpression)?
	;
	
EqOp
	: '=='
	| '!='
	;

ComparisonExpression returns Expression
	: AdditiveExpression ({Comparison.left=current} op=RelOp right=AdditiveExpression)?
	;

RelOp
	: '<=' 
	| '<' 
	| '>' 
	| '>=' 
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
	;

AddOp
	: '+' 
	| '-'
	;
	
MultiplicativeExpression returns Expression
	: Atom ({Factor.left=current} op=MulOp right=Atom)*
	;
	
MulOp
	: '*'
	| '/'
	| '%' //modulo has same order of operation as multiplication
	;
	
Atom returns Expression
	: {PrimaryExpression} ('(' expression = Expression ')')
	| expression = Var
	| expression = Call
	| {LiteralInt} value=SignedInt
	| {LiteralFloat} value=SignedFloat
	| {LiteralBool} value=Bool
	| {LiteralVector} value=Vector
	| {LiteralString} value=STRING //TODO concatenation != addition
	;
	
Call
	: function=[FunDeclaration] '(' args=Arguments? ')'
	;
	
Arguments
	: expressions += Expression (',' expressions += Expression)* //TODO link with params
	;
