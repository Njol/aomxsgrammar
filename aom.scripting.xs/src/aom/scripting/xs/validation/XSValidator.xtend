/*
 * generated by Xtext
 */
package aom.scripting.xs.validation

import aom.scripting.xs.xs.Call
import aom.scripting.xs.xs.FunDeclaration
import aom.scripting.xs.xs.XsPackage
import org.eclipse.xtext.validation.Check
import de.itemis.xtext.typesystem.ITypesystem
import org.eclipse.emf.ecore.EObject
import com.google.inject.Inject

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class XSValidator extends AbstractXSValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	@Inject
	private ITypesystem ts;

	@Check
	def checkTypesystemRules( EObject x ) {
		//System.out.println("Checking type of " + x.toString())
		ts.checkTypesystemConstraints(x, this);
	}

	@Check
	def checkParameterCount(Call function){ //TODO allow less params, but perform type checks
	    val declaration = function.eCrossReferences().get(0) as FunDeclaration;
	    if(function.args.expressions.size() != declaration.paramlist.params.size()) {
	       error("Bad Parameter Count", XsPackage.Literals.CALL__FUNCTION);
	    }
	}
}
