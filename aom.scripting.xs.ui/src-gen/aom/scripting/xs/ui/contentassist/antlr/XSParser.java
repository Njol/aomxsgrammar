/*
 * generated by Xtext
 */
package aom.scripting.xs.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import aom.scripting.xs.services.XSGrammarAccess;

public class XSParser extends AbstractContentAssistParser {
	
	@Inject
	private XSGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected aom.scripting.xs.ui.contentassist.antlr.internal.InternalXSParser createParser() {
		aom.scripting.xs.ui.contentassist.antlr.internal.InternalXSParser result = new aom.scripting.xs.ui.contentassist.antlr.internal.InternalXSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getFunTypeSpecifierAccess().getAlternatives(), "rule__FunTypeSpecifier__Alternatives");
					put(grammarAccess.getParamsAccess().getAlternatives(), "rule__Params__Alternatives");
					put(grammarAccess.getRuleDeclarationAccess().getAlternatives_2_0(), "rule__RuleDeclaration__Alternatives_2_0");
					put(grammarAccess.getVarTypeSpecifierAccess().getAlternatives(), "rule__VarTypeSpecifier__Alternatives");
					put(grammarAccess.getVarDeclarationOrStatementAccess().getAlternatives(), "rule__VarDeclarationOrStatement__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getPostFixOpAccess().getAlternatives(), "rule__PostFixOp__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEqOpAccess().getAlternatives(), "rule__EqOp__Alternatives");
					put(grammarAccess.getRelOpAccess().getAlternatives(), "rule__RelOp__Alternatives");
					put(grammarAccess.getAddOpAccess().getAlternatives(), "rule__AddOp__Alternatives");
					put(grammarAccess.getMulOpAccess().getAlternatives(), "rule__MulOp__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getLiteralOrVarAccess().getAlternatives(), "rule__LiteralOrVar__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getLiteralNumAccess().getAlternatives(), "rule__LiteralNum__Alternatives");
					put(grammarAccess.getLiteralNumOrVarAccess().getAlternatives(), "rule__LiteralNumOrVar__Alternatives");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getIncludeStatementAccess().getGroup(), "rule__IncludeStatement__Group__0");
					put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
					put(grammarAccess.getGlobalVarDeclarationAccess().getGroup(), "rule__GlobalVarDeclaration__Group__0");
					put(grammarAccess.getVarModifierAccess().getGroup(), "rule__VarModifier__Group__0");
					put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
					put(grammarAccess.getForVarDeclarationAccess().getGroup(), "rule__ForVarDeclaration__Group__0");
					put(grammarAccess.getFunDeclarationAccess().getGroup(), "rule__FunDeclaration__Group__0");
					put(grammarAccess.getParamsAccess().getGroup_0(), "rule__Params__Group_0__0");
					put(grammarAccess.getParamsAccess().getGroup_1(), "rule__Params__Group_1__0");
					put(grammarAccess.getParamsAccess().getGroup_1_1(), "rule__Params__Group_1_1__0");
					put(grammarAccess.getRuleDeclarationAccess().getGroup(), "rule__RuleDeclaration__Group__0");
					put(grammarAccess.getRuleDeclarationAccess().getGroup_2_3(), "rule__RuleDeclaration__Group_2_3__0");
					put(grammarAccess.getRuleDeclarationAccess().getGroup_2_4(), "rule__RuleDeclaration__Group_2_4__0");
					put(grammarAccess.getRuleDeclarationAccess().getGroup_2_5(), "rule__RuleDeclaration__Group_2_5__0");
					put(grammarAccess.getFunModifierAccess().getGroup(), "rule__FunModifier__Group__0");
					put(grammarAccess.getCompoundStatementAccess().getGroup(), "rule__CompoundStatement__Group__0");
					put(grammarAccess.getVarDeclarationOrStatementAccess().getGroup_0(), "rule__VarDeclarationOrStatement__Group_0__0");
					put(grammarAccess.getExpressionStatementAccess().getGroup(), "rule__ExpressionStatement__Group__0");
					put(grammarAccess.getPostfixStatementAccess().getGroup(), "rule__PostfixStatement__Group__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup(), "rule__IfElseStatement__Group__0");
					put(grammarAccess.getIfElseStatementAccess().getGroup_5(), "rule__IfElseStatement__Group_5__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getSwitchStatementAccess().getGroup(), "rule__SwitchStatement__Group__0");
					put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
					put(grammarAccess.getSwitchDefaultAccess().getGroup(), "rule__SwitchDefault__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup_2(), "rule__ReturnStatement__Group_2__0");
					put(grammarAccess.getContinueStatementAccess().getGroup(), "rule__ContinueStatement__Group__0");
					put(grammarAccess.getBreakStatementAccess().getGroup(), "rule__BreakStatement__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_1(), "rule__Expression__Group_0_1__0");
					put(grammarAccess.getSimpleExpressionAccess().getGroup(), "rule__SimpleExpression__Group__0");
					put(grammarAccess.getSimpleExpressionAccess().getGroup_1(), "rule__SimpleExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getEqualsExpressionAccess().getGroup(), "rule__EqualsExpression__Group__0");
					put(grammarAccess.getEqualsExpressionAccess().getGroup_1(), "rule__EqualsExpression__Group_1__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getAtomAccess().getGroup_0(), "rule__Atom__Group_0__0");
					put(grammarAccess.getAtomAccess().getGroup_0_1(), "rule__Atom__Group_0_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getLiteralNumAccess().getGroup_0(), "rule__LiteralNum__Group_0__0");
					put(grammarAccess.getLiteralNumAccess().getGroup_1(), "rule__LiteralNum__Group_1__0");
					put(grammarAccess.getLiteralNumAccess().getGroup_2(), "rule__LiteralNum__Group_2__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
					put(grammarAccess.getArgumentsAccess().getGroup_1(), "rule__Arguments__Group_1__0");
					put(grammarAccess.getIntTypeAccess().getGroup(), "rule__IntType__Group__0");
					put(grammarAccess.getFloatTypeAccess().getGroup(), "rule__FloatType__Group__0");
					put(grammarAccess.getBoolTypeAccess().getGroup(), "rule__BoolType__Group__0");
					put(grammarAccess.getVectorTypeAccess().getGroup(), "rule__VectorType__Group__0");
					put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
					put(grammarAccess.getVoidTypeAccess().getGroup(), "rule__VoidType__Group__0");
					put(grammarAccess.getSignedIntAccess().getGroup(), "rule__SignedInt__Group__0");
					put(grammarAccess.getSignedFloatAccess().getGroup(), "rule__SignedFloat__Group__0");
					put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
					put(grammarAccess.getProgramAccess().getDeclarationsAssignment(), "rule__Program__DeclarationsAssignment");
					put(grammarAccess.getIncludeStatementAccess().getFilePathAssignment_1(), "rule__IncludeStatement__FilePathAssignment_1");
					put(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0(), "rule__VarDeclaration__TypeAssignment_0");
					put(grammarAccess.getVarDeclarationAccess().getNameAssignment_1(), "rule__VarDeclaration__NameAssignment_1");
					put(grammarAccess.getVarDeclarationAccess().getValueAssignment_3(), "rule__VarDeclaration__ValueAssignment_3");
					put(grammarAccess.getGlobalVarDeclarationAccess().getModifierAssignment_1(), "rule__GlobalVarDeclaration__ModifierAssignment_1");
					put(grammarAccess.getGlobalVarDeclarationAccess().getTypeAssignment_2(), "rule__GlobalVarDeclaration__TypeAssignment_2");
					put(grammarAccess.getGlobalVarDeclarationAccess().getNameAssignment_3(), "rule__GlobalVarDeclaration__NameAssignment_3");
					put(grammarAccess.getGlobalVarDeclarationAccess().getValueAssignment_5(), "rule__GlobalVarDeclaration__ValueAssignment_5");
					put(grammarAccess.getVarModifierAccess().getConstAssignment_1_0(), "rule__VarModifier__ConstAssignment_1_0");
					put(grammarAccess.getVarModifierAccess().getExternAssignment_1_1(), "rule__VarModifier__ExternAssignment_1_1");
					put(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_0(), "rule__ParameterDeclaration__TypeAssignment_0");
					put(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1(), "rule__ParameterDeclaration__NameAssignment_1");
					put(grammarAccess.getParameterDeclarationAccess().getValueAssignment_3(), "rule__ParameterDeclaration__ValueAssignment_3");
					put(grammarAccess.getForVarDeclarationAccess().getNameAssignment_0(), "rule__ForVarDeclaration__NameAssignment_0");
					put(grammarAccess.getForVarDeclarationAccess().getValueAssignment_2(), "rule__ForVarDeclaration__ValueAssignment_2");
					put(grammarAccess.getFunDeclarationAccess().getModifierAssignment_0(), "rule__FunDeclaration__ModifierAssignment_0");
					put(grammarAccess.getFunDeclarationAccess().getTypeAssignment_1(), "rule__FunDeclaration__TypeAssignment_1");
					put(grammarAccess.getFunDeclarationAccess().getNameAssignment_2(), "rule__FunDeclaration__NameAssignment_2");
					put(grammarAccess.getFunDeclarationAccess().getParamlistAssignment_4(), "rule__FunDeclaration__ParamlistAssignment_4");
					put(grammarAccess.getFunDeclarationAccess().getStatementsAssignment_6(), "rule__FunDeclaration__StatementsAssignment_6");
					put(grammarAccess.getParamsAccess().getParamsAssignment_1_0(), "rule__Params__ParamsAssignment_1_0");
					put(grammarAccess.getParamsAccess().getParamsAssignment_1_1_1(), "rule__Params__ParamsAssignment_1_1_1");
					put(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1(), "rule__RuleDeclaration__NameAssignment_1");
					put(grammarAccess.getRuleDeclarationAccess().getActiveAssignment_2_0_0(), "rule__RuleDeclaration__ActiveAssignment_2_0_0");
					put(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyAssignment_2_1(), "rule__RuleDeclaration__RunImmediatelyAssignment_2_1");
					put(grammarAccess.getRuleDeclarationAccess().getHighFrequencyAssignment_2_2(), "rule__RuleDeclaration__HighFrequencyAssignment_2_2");
					put(grammarAccess.getRuleDeclarationAccess().getGroupAssignment_2_3_1(), "rule__RuleDeclaration__GroupAssignment_2_3_1");
					put(grammarAccess.getRuleDeclarationAccess().getMinIntervalAssignment_2_4_1(), "rule__RuleDeclaration__MinIntervalAssignment_2_4_1");
					put(grammarAccess.getRuleDeclarationAccess().getMaxIntervalAssignment_2_5_1(), "rule__RuleDeclaration__MaxIntervalAssignment_2_5_1");
					put(grammarAccess.getRuleDeclarationAccess().getStatementsAssignment_3(), "rule__RuleDeclaration__StatementsAssignment_3");
					put(grammarAccess.getFunModifierAccess().getMutableAssignment_1(), "rule__FunModifier__MutableAssignment_1");
					put(grammarAccess.getCompoundStatementAccess().getContentsAssignment_2(), "rule__CompoundStatement__ContentsAssignment_2");
					put(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0(), "rule__ExpressionStatement__ExpressionAssignment_0");
					put(grammarAccess.getPostfixStatementAccess().getVarAssignment_0(), "rule__PostfixStatement__VarAssignment_0");
					put(grammarAccess.getPostfixStatementAccess().getOpAssignment_1(), "rule__PostfixStatement__OpAssignment_1");
					put(grammarAccess.getIfElseStatementAccess().getConditionAssignment_2(), "rule__IfElseStatement__ConditionAssignment_2");
					put(grammarAccess.getIfElseStatementAccess().getThenStatementAssignment_4(), "rule__IfElseStatement__ThenStatementAssignment_4");
					put(grammarAccess.getIfElseStatementAccess().getElseStatementAssignment_5_1(), "rule__IfElseStatement__ElseStatementAssignment_5_1");
					put(grammarAccess.getWhileStatementAccess().getConditionAssignment_2(), "rule__WhileStatement__ConditionAssignment_2");
					put(grammarAccess.getWhileStatementAccess().getStatementAssignment_4(), "rule__WhileStatement__StatementAssignment_4");
					put(grammarAccess.getForStatementAccess().getVarAssignment_2(), "rule__ForStatement__VarAssignment_2");
					put(grammarAccess.getForStatementAccess().getOpAssignment_4(), "rule__ForStatement__OpAssignment_4");
					put(grammarAccess.getForStatementAccess().getExpressionAssignment_5(), "rule__ForStatement__ExpressionAssignment_5");
					put(grammarAccess.getForStatementAccess().getStatementAssignment_7(), "rule__ForStatement__StatementAssignment_7");
					put(grammarAccess.getSwitchStatementAccess().getVarAssignment_2(), "rule__SwitchStatement__VarAssignment_2");
					put(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5(), "rule__SwitchStatement__CasesAssignment_5");
					put(grammarAccess.getSwitchStatementAccess().getDefaultAssignment_6(), "rule__SwitchStatement__DefaultAssignment_6");
					put(grammarAccess.getSwitchCaseAccess().getVarAssignment_1(), "rule__SwitchCase__VarAssignment_1");
					put(grammarAccess.getSwitchCaseAccess().getStatementAssignment_3(), "rule__SwitchCase__StatementAssignment_3");
					put(grammarAccess.getSwitchDefaultAccess().getStatementAssignment_2(), "rule__SwitchDefault__StatementAssignment_2");
					put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2_1(), "rule__ReturnStatement__ExpressionAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getVarAssignment_0_1_0(), "rule__Expression__VarAssignment_0_1_0");
					put(grammarAccess.getExpressionAccess().getExpressionAssignment_0_1_2(), "rule__Expression__ExpressionAssignment_0_1_2");
					put(grammarAccess.getExpressionAccess().getExpressionAssignment_1(), "rule__Expression__ExpressionAssignment_1");
					put(grammarAccess.getVarAccess().getDeclarationAssignment(), "rule__Var__DeclarationAssignment");
					put(grammarAccess.getSimpleExpressionAccess().getOpAssignment_1_1(), "rule__SimpleExpression__OpAssignment_1_1");
					put(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_2(), "rule__SimpleExpression__RightAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1(), "rule__AndExpression__OpAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
					put(grammarAccess.getEqualsExpressionAccess().getOpAssignment_1_1(), "rule__EqualsExpression__OpAssignment_1_1");
					put(grammarAccess.getEqualsExpressionAccess().getRightAssignment_1_2(), "rule__EqualsExpression__RightAssignment_1_2");
					put(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1(), "rule__ComparisonExpression__OpAssignment_1_1");
					put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
					put(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1(), "rule__AdditiveExpression__OpAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2(), "rule__AdditiveExpression__RightAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1(), "rule__MultiplicativeExpression__OpAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpression__RightAssignment_1_2");
					put(grammarAccess.getAtomAccess().getExpressionAssignment_0_1_1(), "rule__Atom__ExpressionAssignment_0_1_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_1_1(), "rule__Literal__ValueAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getValueAssignment_2_1(), "rule__Literal__ValueAssignment_2_1");
					put(grammarAccess.getLiteralNumAccess().getValueAssignment_0_1(), "rule__LiteralNum__ValueAssignment_0_1");
					put(grammarAccess.getLiteralNumAccess().getValueAssignment_1_1(), "rule__LiteralNum__ValueAssignment_1_1");
					put(grammarAccess.getLiteralNumAccess().getValueAssignment_2_1(), "rule__LiteralNum__ValueAssignment_2_1");
					put(grammarAccess.getCallAccess().getFunctionAssignment_0(), "rule__Call__FunctionAssignment_0");
					put(grammarAccess.getCallAccess().getArgsAssignment_2(), "rule__Call__ArgsAssignment_2");
					put(grammarAccess.getArgumentsAccess().getExpressionsAssignment_0(), "rule__Arguments__ExpressionsAssignment_0");
					put(grammarAccess.getArgumentsAccess().getExpressionsAssignment_1_1(), "rule__Arguments__ExpressionsAssignment_1_1");
					put(grammarAccess.getVectorAccess().getXAssignment_2(), "rule__Vector__XAssignment_2");
					put(grammarAccess.getVectorAccess().getYAssignment_4(), "rule__Vector__YAssignment_4");
					put(grammarAccess.getVectorAccess().getZAssignment_6(), "rule__Vector__ZAssignment_6");
					put(grammarAccess.getVarModifierAccess().getUnorderedGroup_1(), "rule__VarModifier__UnorderedGroup_1");
					put(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), "rule__RuleDeclaration__UnorderedGroup_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			aom.scripting.xs.ui.contentassist.antlr.internal.InternalXSParser typedParser = (aom.scripting.xs.ui.contentassist.antlr.internal.InternalXSParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
