/*
* generated by Xtext
*/
grammar InternalXS;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package aom.scripting.xs.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package aom.scripting.xs.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import aom.scripting.xs.services.XSGrammarAccess;

}

@parser::members {
 
 	private XSGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XSGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getDeclarationsAssignment()); }
(rule__Program__DeclarationsAssignment)*
{ after(grammarAccess.getProgramAccess().getDeclarationsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSign
entryRuleSign 
:
{ before(grammarAccess.getSignRule()); }
	 ruleSign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedFloat
entryRuleSignedFloat 
:
{ before(grammarAccess.getSignedFloatRule()); }
	 ruleSignedFloat
{ after(grammarAccess.getSignedFloatRule()); } 
	 EOF 
;

// Rule SignedFloat
ruleSignedFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedFloatAccess().getGroup()); }
(rule__SignedFloat__Group__0)
{ after(grammarAccess.getSignedFloatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedNum
entryRuleSignedNum 
:
{ before(grammarAccess.getSignedNumRule()); }
	 ruleSignedNum
{ after(grammarAccess.getSignedNumRule()); } 
	 EOF 
;

// Rule SignedNum
ruleSignedNum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedNumAccess().getAlternatives()); }
(rule__SignedNum__Alternatives)
{ after(grammarAccess.getSignedNumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantNum
entryRuleConstantNum 
:
{ before(grammarAccess.getConstantNumRule()); }
	 ruleConstantNum
{ after(grammarAccess.getConstantNumRule()); } 
	 EOF 
;

// Rule ConstantNum
ruleConstantNum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantNumAccess().getVarAssignment()); }
(rule__ConstantNum__VarAssignment)
{ after(grammarAccess.getConstantNumAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralOrConstantNum
entryRuleLiteralOrConstantNum 
:
{ before(grammarAccess.getLiteralOrConstantNumRule()); }
	 ruleLiteralOrConstantNum
{ after(grammarAccess.getLiteralOrConstantNumRule()); } 
	 EOF 
;

// Rule LiteralOrConstantNum
ruleLiteralOrConstantNum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralOrConstantNumAccess().getAlternatives()); }
(rule__LiteralOrConstantNum__Alternatives)
{ after(grammarAccess.getLiteralOrConstantNumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool
entryRuleBool 
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAccess().getAlternatives()); }
(rule__Bool__Alternatives)
{ after(grammarAccess.getBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVector
entryRuleVector 
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorAccess().getGroup()); }
(rule__Vector__Group__0)
{ after(grammarAccess.getVectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration 
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
(rule__VarDeclaration__Group__0)
{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForVarDeclaration
entryRuleForVarDeclaration 
:
{ before(grammarAccess.getForVarDeclarationRule()); }
	 ruleForVarDeclaration
{ after(grammarAccess.getForVarDeclarationRule()); } 
	 EOF 
;

// Rule ForVarDeclaration
ruleForVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForVarDeclarationAccess().getGroup()); }
(rule__ForVarDeclaration__Group__0)
{ after(grammarAccess.getForVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunDeclaration
entryRuleFunDeclaration 
:
{ before(grammarAccess.getFunDeclarationRule()); }
	 ruleFunDeclaration
{ after(grammarAccess.getFunDeclarationRule()); } 
	 EOF 
;

// Rule FunDeclaration
ruleFunDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunDeclarationAccess().getGroup()); }
(rule__FunDeclaration__Group__0)
{ after(grammarAccess.getFunDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeStatement
entryRuleIncludeStatement 
:
{ before(grammarAccess.getIncludeStatementRule()); }
	 ruleIncludeStatement
{ after(grammarAccess.getIncludeStatementRule()); } 
	 EOF 
;

// Rule IncludeStatement
ruleIncludeStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeStatementAccess().getGroup()); }
(rule__IncludeStatement__Group__0)
{ after(grammarAccess.getIncludeStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration 
:
{ before(grammarAccess.getRuleDeclarationRule()); }
	 ruleRuleDeclaration
{ after(grammarAccess.getRuleDeclarationRule()); } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroup()); }
(rule__RuleDeclaration__Group__0)
{ after(grammarAccess.getRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarModifier
entryRuleVarModifier 
:
{ before(grammarAccess.getVarModifierRule()); }
	 ruleVarModifier
{ after(grammarAccess.getVarModifierRule()); } 
	 EOF 
;

// Rule VarModifier
ruleVarModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarModifierAccess().getUnorderedGroup()); }
(rule__VarModifier__UnorderedGroup)
{ after(grammarAccess.getVarModifierAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunModifier
entryRuleFunModifier 
:
{ before(grammarAccess.getFunModifierRule()); }
	 ruleFunModifier
{ after(grammarAccess.getFunModifierRule()); } 
	 EOF 
;

// Rule FunModifier
ruleFunModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunModifierAccess().getUnorderedGroup()); }
(rule__FunModifier__UnorderedGroup)
{ after(grammarAccess.getFunModifierAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarTypeSpecifier
entryRuleVarTypeSpecifier 
:
{ before(grammarAccess.getVarTypeSpecifierRule()); }
	 ruleVarTypeSpecifier
{ after(grammarAccess.getVarTypeSpecifierRule()); } 
	 EOF 
;

// Rule VarTypeSpecifier
ruleVarTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarTypeSpecifierAccess().getAlternatives()); }
(rule__VarTypeSpecifier__Alternatives)
{ after(grammarAccess.getVarTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunTypeSpecifier
entryRuleFunTypeSpecifier 
:
{ before(grammarAccess.getFunTypeSpecifierRule()); }
	 ruleFunTypeSpecifier
{ after(grammarAccess.getFunTypeSpecifierRule()); } 
	 EOF 
;

// Rule FunTypeSpecifier
ruleFunTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunTypeSpecifierAccess().getAlternatives()); }
(rule__FunTypeSpecifier__Alternatives)
{ after(grammarAccess.getFunTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParams
entryRuleParams 
:
{ before(grammarAccess.getParamsRule()); }
	 ruleParams
{ after(grammarAccess.getParamsRule()); } 
	 EOF 
;

// Rule Params
ruleParams
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamsAccess().getAlternatives()); }
(rule__Params__Alternatives)
{ after(grammarAccess.getParamsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement 
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 ruleCompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStatementAccess().getGroup()); }
(rule__CompoundStatement__Group__0)
{ after(grammarAccess.getCompoundStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclarationOrStatement
entryRuleVarDeclarationOrStatement 
:
{ before(grammarAccess.getVarDeclarationOrStatementRule()); }
	 ruleVarDeclarationOrStatement
{ after(grammarAccess.getVarDeclarationOrStatementRule()); } 
	 EOF 
;

// Rule VarDeclarationOrStatement
ruleVarDeclarationOrStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getAlternatives()); }
(rule__VarDeclarationOrStatement__Alternatives)
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
(rule__ExpressionStatement__Alternatives)
{ after(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfElseStatement
entryRuleIfElseStatement 
:
{ before(grammarAccess.getIfElseStatementRule()); }
	 ruleIfElseStatement
{ after(grammarAccess.getIfElseStatementRule()); } 
	 EOF 
;

// Rule IfElseStatement
ruleIfElseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfElseStatementAccess().getGroup()); }
(rule__IfElseStatement__Group__0)
{ after(grammarAccess.getIfElseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForStatement
entryRuleForStatement 
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForStatementAccess().getGroup()); }
(rule__ForStatement__Group__0)
{ after(grammarAccess.getForStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement 
:
{ before(grammarAccess.getSwitchStatementRule()); }
	 ruleSwitchStatement
{ after(grammarAccess.getSwitchStatementRule()); } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchStatementAccess().getGroup()); }
(rule__SwitchStatement__Group__0)
{ after(grammarAccess.getSwitchStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchCase
entryRuleSwitchCase 
:
{ before(grammarAccess.getSwitchCaseRule()); }
	 ruleSwitchCase
{ after(grammarAccess.getSwitchCaseRule()); } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchCaseAccess().getGroup()); }
(rule__SwitchCase__Group__0)
{ after(grammarAccess.getSwitchCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchDefault
entryRuleSwitchDefault 
:
{ before(grammarAccess.getSwitchDefaultRule()); }
	 ruleSwitchDefault
{ after(grammarAccess.getSwitchDefaultRule()); } 
	 EOF 
;

// Rule SwitchDefault
ruleSwitchDefault
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchDefaultAccess().getGroup()); }
(rule__SwitchDefault__Group__0)
{ after(grammarAccess.getSwitchDefaultAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContinueStatement
entryRuleContinueStatement 
:
{ before(grammarAccess.getContinueStatementRule()); }
	 ruleContinueStatement
{ after(grammarAccess.getContinueStatementRule()); } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContinueStatementAccess().getGroup()); }
(rule__ContinueStatement__Group__0)
{ after(grammarAccess.getContinueStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBreakStatement
entryRuleBreakStatement 
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
(rule__BreakStatement__Group__0)
{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostFixOp
entryRulePostFixOp 
:
{ before(grammarAccess.getPostFixOpRule()); }
	 rulePostFixOp
{ after(grammarAccess.getPostFixOpRule()); } 
	 EOF 
;

// Rule PostFixOp
rulePostFixOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostFixOpAccess().getAlternatives()); }
(rule__PostFixOp__Alternatives)
{ after(grammarAccess.getPostFixOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVar
entryRuleVar 
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccess().getNameAssignment()); }
(rule__Var__NameAssignment)
{ after(grammarAccess.getVarAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression 
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup()); }
(rule__SimpleExpression__Group__0)
{ after(grammarAccess.getSimpleExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualsExpression
entryRuleEqualsExpression 
:
{ before(grammarAccess.getEqualsExpressionRule()); }
	 ruleEqualsExpression
{ after(grammarAccess.getEqualsExpressionRule()); } 
	 EOF 
;

// Rule EqualsExpression
ruleEqualsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualsExpressionAccess().getGroup()); }
(rule__EqualsExpression__Group__0)
{ after(grammarAccess.getEqualsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqOp
entryRuleEqOp 
:
{ before(grammarAccess.getEqOpRule()); }
	 ruleEqOp
{ after(grammarAccess.getEqOpRule()); } 
	 EOF 
;

// Rule EqOp
ruleEqOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqOpAccess().getAlternatives()); }
(rule__EqOp__Alternatives)
{ after(grammarAccess.getEqOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelOp
entryRuleRelOp 
:
{ before(grammarAccess.getRelOpRule()); }
	 ruleRelOp
{ after(grammarAccess.getRelOpRule()); } 
	 EOF 
;

// Rule RelOp
ruleRelOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelOpAccess().getAlternatives()); }
(rule__RelOp__Alternatives)
{ after(grammarAccess.getRelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddOp
entryRuleAddOp 
:
{ before(grammarAccess.getAddOpRule()); }
	 ruleAddOp
{ after(grammarAccess.getAddOpRule()); } 
	 EOF 
;

// Rule AddOp
ruleAddOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddOpAccess().getAlternatives()); }
(rule__AddOp__Alternatives)
{ after(grammarAccess.getAddOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulOp
entryRuleMulOp 
:
{ before(grammarAccess.getMulOpRule()); }
	 ruleMulOp
{ after(grammarAccess.getMulOpRule()); } 
	 EOF 
;

// Rule MulOp
ruleMulOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMulOpAccess().getAlternatives()); }
(rule__MulOp__Alternatives)
{ after(grammarAccess.getMulOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArguments
entryRuleArguments 
:
{ before(grammarAccess.getArgumentsRule()); }
	 ruleArguments
{ after(grammarAccess.getArgumentsRule()); } 
	 EOF 
;

// Rule Arguments
ruleArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentsAccess().getGroup()); }
(rule__Arguments__Group__0)
{ after(grammarAccess.getArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getGroup_0()); }
(rule__Declaration__Group_0__0)
{ after(grammarAccess.getDeclarationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getFunDeclarationParserRuleCall_1()); }
	ruleFunDeclaration
{ after(grammarAccess.getDeclarationAccess().getFunDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getGroup_2()); }
(rule__Declaration__Group_2__0)
{ after(grammarAccess.getDeclarationAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getRuleDeclarationParserRuleCall_3()); }
	ruleRuleDeclaration
{ after(grammarAccess.getDeclarationAccess().getRuleDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedNum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedNumAccess().getSignedIntParserRuleCall_0()); }
	ruleSignedInt
{ after(grammarAccess.getSignedNumAccess().getSignedIntParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSignedNumAccess().getSignedFloatParserRuleCall_1()); }
	ruleSignedFloat
{ after(grammarAccess.getSignedNumAccess().getSignedFloatParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOrConstantNum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOrConstantNumAccess().getGroup_0()); }
(rule__LiteralOrConstantNum__Group_0__0)
{ after(grammarAccess.getLiteralOrConstantNumAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralOrConstantNumAccess().getConstantNumParserRuleCall_1()); }
	ruleConstantNum
{ after(grammarAccess.getLiteralOrConstantNumAccess().getConstantNumParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBoolAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBoolAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBoolAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__StatusAlternatives_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getStatusActiveKeyword_2_0_0_0()); }

	'active' 

{ after(grammarAccess.getRuleDeclarationAccess().getStatusActiveKeyword_2_0_0_0()); }
)

    |(
{ before(grammarAccess.getRuleDeclarationAccess().getStatusInactiveKeyword_2_0_0_1()); }

	'inactive' 

{ after(grammarAccess.getRuleDeclarationAccess().getStatusInactiveKeyword_2_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarTypeSpecifierAccess().getIntKeyword_0()); }

	'int' 

{ after(grammarAccess.getVarTypeSpecifierAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getFloatKeyword_1()); }

	'float' 

{ after(grammarAccess.getVarTypeSpecifierAccess().getFloatKeyword_1()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getBoolKeyword_2()); }

	'bool' 

{ after(grammarAccess.getVarTypeSpecifierAccess().getBoolKeyword_2()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getVectorKeyword_3()); }

	'vector' 

{ after(grammarAccess.getVarTypeSpecifierAccess().getVectorKeyword_3()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getStringKeyword_4()); }

	'string' 

{ after(grammarAccess.getVarTypeSpecifierAccess().getStringKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunTypeSpecifierAccess().getVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getFunTypeSpecifierAccess().getVoidKeyword_0()); }
)

    |(
{ before(grammarAccess.getFunTypeSpecifierAccess().getVarTypeSpecifierParserRuleCall_1()); }
	ruleVarTypeSpecifier
{ after(grammarAccess.getFunTypeSpecifierAccess().getVarTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamAssignment_0()); }
(rule__Params__ParamAssignment_0)
{ after(grammarAccess.getParamsAccess().getParamAssignment_0()); }
)

    |(
{ before(grammarAccess.getParamsAccess().getGroup_1()); }
(rule__Params__Group_1__0)
{ after(grammarAccess.getParamsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationOrStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getGroup_0()); }
(rule__VarDeclarationOrStatement__Group_0__0)
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getStatementParserRuleCall_1()); }
	ruleStatement
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); }
	ruleExpressionStatement
{ after(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_1()); }
	ruleCompoundStatement
{ after(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_2()); }
	ruleIfElseStatement
{ after(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
	ruleForStatement
{ after(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_5()); }
	ruleSwitchStatement
{ after(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
	ruleContinueStatement
{ after(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
	ruleBreakStatement
{ after(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
(rule__ExpressionStatement__Group_0__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
(rule__ExpressionStatement__Group_1__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostFixOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostFixOpAccess().getPlusSignPlusSignKeyword_0()); }

	'++' 

{ after(grammarAccess.getPostFixOpAccess().getPlusSignPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getPostFixOpAccess().getHyphenMinusHyphenMinusKeyword_1()); }

	'--' 

{ after(grammarAccess.getPostFixOpAccess().getHyphenMinusHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_0()); }
(rule__Expression__Group_0__0)
{ after(grammarAccess.getExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getExpressionAssignment_1()); }
(rule__Expression__ExpressionAssignment_1)
{ after(grammarAccess.getExpressionAccess().getExpressionAssignment_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
(rule__Expression__Group_2__0)
{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqOpAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getEqOpAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqOpAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getEqOpAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelOpAccess().getLessThanSignEqualsSignKeyword_0()); }

	'<=' 

{ after(grammarAccess.getRelOpAccess().getLessThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelOpAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getRelOpAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getGreaterThanSignEqualsSignKeyword_3()); }

	'>=' 

{ after(grammarAccess.getRelOpAccess().getGreaterThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOpAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMulOpAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMulOpAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getMulOpAccess().getSolidusKeyword_1()); }
)

    |(
{ before(grammarAccess.getMulOpAccess().getPercentSignKeyword_2()); }

	'%' 

{ after(grammarAccess.getMulOpAccess().getPercentSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_0()); }
(rule__Atom__Group_0__0)
{ after(grammarAccess.getAtomAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getExpressionAssignment_1()); }
(rule__Atom__ExpressionAssignment_1)
{ after(grammarAccess.getAtomAccess().getExpressionAssignment_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getExpressionAssignment_2()); }
(rule__Atom__ExpressionAssignment_2)
{ after(grammarAccess.getAtomAccess().getExpressionAssignment_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_3()); }
(rule__Atom__Group_3__0)
{ after(grammarAccess.getAtomAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_4()); }
(rule__Atom__Group_4__0)
{ after(grammarAccess.getAtomAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_5()); }
(rule__Atom__Group_5__0)
{ after(grammarAccess.getAtomAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_6()); }
(rule__Atom__Group_6__0)
{ after(grammarAccess.getAtomAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_7()); }
(rule__Atom__Group_7__0)
{ after(grammarAccess.getAtomAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Declaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_0__0__Impl
	rule__Declaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVarDeclarationParserRuleCall_0_0()); }
	ruleVarDeclaration
{ after(grammarAccess.getDeclarationAccess().getVarDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getDeclarationAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__0__Impl
	rule__Declaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getIncludeStatementParserRuleCall_2_0()); }
	ruleIncludeStatement
{ after(grammarAccess.getDeclarationAccess().getIncludeStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2_1()); }

	';' 

{ after(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignParserRuleCall_0()); }
(	ruleSign)?
{ after(grammarAccess.getSignedIntAccess().getSignParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedFloat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__0__Impl
	rule__SignedFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getSignParserRuleCall_0()); }
(	ruleSign)?
{ after(grammarAccess.getSignedFloatAccess().getSignParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__1__Impl
	rule__SignedFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__2__Impl
	rule__SignedFloat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getSignedFloatAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LiteralOrConstantNum__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOrConstantNum__Group_0__0__Impl
	rule__LiteralOrConstantNum__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOrConstantNum__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOrConstantNumAccess().getSignedNumAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralOrConstantNumAccess().getSignedNumAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralOrConstantNum__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOrConstantNum__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOrConstantNum__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOrConstantNumAccess().getSignedNumParserRuleCall_0_1()); }
	ruleSignedNum
{ after(grammarAccess.getLiteralOrConstantNumAccess().getSignedNumParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getVectorKeyword_0()); }

	'vector' 

{ after(grammarAccess.getVectorAccess().getVectorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getXAssignment_2()); }
(rule__Vector__XAssignment_2)
{ after(grammarAccess.getVectorAccess().getXAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__3__Impl
	rule__Vector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getVectorAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__4__Impl
	rule__Vector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getYAssignment_4()); }
(rule__Vector__YAssignment_4)
{ after(grammarAccess.getVectorAccess().getYAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__5__Impl
	rule__Vector__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getVectorAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__6__Impl
	rule__Vector__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getZAssignment_6()); }
(rule__Vector__ZAssignment_6)
{ after(grammarAccess.getVectorAccess().getZAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getVectorAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__VarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getModifierAssignment_0()); }
(rule__VarDeclaration__ModifierAssignment_0)
{ after(grammarAccess.getVarDeclarationAccess().getModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_1()); }
(rule__VarDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_2()); }
(rule__VarDeclaration__NameAssignment_2)
{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__3__Impl
	rule__VarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getVarDeclarationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getValueAssignment_4()); }
(rule__VarDeclaration__ValueAssignment_4)
{ after(grammarAccess.getVarDeclarationAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForVarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__0__Impl
	rule__ForVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getNameAssignment_0()); }
(rule__ForVarDeclaration__NameAssignment_0)
{ after(grammarAccess.getForVarDeclarationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForVarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__1__Impl
	rule__ForVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getForVarDeclarationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForVarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getValueAssignment_2()); }
(rule__ForVarDeclaration__ValueAssignment_2)
{ after(grammarAccess.getForVarDeclarationAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__0__Impl
	rule__FunDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getModifierAssignment_0()); }
(rule__FunDeclaration__ModifierAssignment_0)
{ after(grammarAccess.getFunDeclarationAccess().getModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__1__Impl
	rule__FunDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getTypeAssignment_1()); }
(rule__FunDeclaration__TypeAssignment_1)
{ after(grammarAccess.getFunDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__2__Impl
	rule__FunDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getNameAssignment_2()); }
(rule__FunDeclaration__NameAssignment_2)
{ after(grammarAccess.getFunDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__3__Impl
	rule__FunDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getFunDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__4__Impl
	rule__FunDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getParamlistAssignment_4()); }
(rule__FunDeclaration__ParamlistAssignment_4)?
{ after(grammarAccess.getFunDeclarationAccess().getParamlistAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__5__Impl
	rule__FunDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFunDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getStatementsAssignment_6()); }
(rule__FunDeclaration__StatementsAssignment_6)
{ after(grammarAccess.getFunDeclarationAccess().getStatementsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IncludeStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeStatement__Group__0__Impl
	rule__IncludeStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0()); }

	'include' 

{ after(grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeStatementAccess().getNameAssignment_1()); }
(rule__IncludeStatement__NameAssignment_1)
{ after(grammarAccess.getIncludeStatementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__0__Impl
	rule__RuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRuleKeyword_0()); }

	'rule' 

{ after(grammarAccess.getRuleDeclarationAccess().getRuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__1__Impl
	rule__RuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1()); }
(rule__RuleDeclaration__NameAssignment_1)
{ after(grammarAccess.getRuleDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__2__Impl
	rule__RuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2()); }
(rule__RuleDeclaration__UnorderedGroup_2)
{ after(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getStatementsAssignment_3()); }
(rule__RuleDeclaration__StatementsAssignment_3)
{ after(grammarAccess.getRuleDeclarationAccess().getStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RuleDeclaration__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_3__0__Impl
	rule__RuleDeclaration__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupKeyword_2_3_0()); }

	'group' 

{ after(grammarAccess.getRuleDeclarationAccess().getGroupKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupAssignment_2_3_1()); }
(rule__RuleDeclaration__GroupAssignment_2_3_1)
{ after(grammarAccess.getRuleDeclarationAccess().getGroupAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group_2_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_4__0__Impl
	rule__RuleDeclaration__Group_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalKeyword_2_4_0()); }

	'minInterval' 

{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalKeyword_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_2_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalAssignment_2_4_1()); }
(rule__RuleDeclaration__MinIntervalAssignment_2_4_1)
{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalAssignment_2_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group_2_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_5__0__Impl
	rule__RuleDeclaration__Group_2_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalKeyword_2_5_0()); }

	'maxInterval' 

{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalKeyword_2_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_2_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_2_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_2_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalAssignment_2_5_1()); }
(rule__RuleDeclaration__MaxIntervalAssignment_2_5_1)
{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalAssignment_2_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Params__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Params__Group_1__0__Impl
	rule__Params__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamsAssignment_1_0()); }
(rule__Params__ParamsAssignment_1_0)
{ after(grammarAccess.getParamsAccess().getParamsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Params__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getGroup_1_1()); }
(rule__Params__Group_1_1__0)*
{ after(grammarAccess.getParamsAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Params__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Params__Group_1_1__0__Impl
	rule__Params__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getParamsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Params__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Params__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Params__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamsAssignment_1_1_1()); }
(rule__Params__ParamsAssignment_1_1_1)
{ after(grammarAccess.getParamsAccess().getParamsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__0__Impl
	rule__CompoundStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
(

)
{ after(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__1__Impl
	rule__CompoundStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__2__Impl
	rule__CompoundStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getContentsAssignment_2()); }
(rule__CompoundStatement__ContentsAssignment_2)*
{ after(grammarAccess.getCompoundStatementAccess().getContentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VarDeclarationOrStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclarationOrStatement__Group_0__0__Impl
	rule__VarDeclarationOrStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationOrStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getVarDeclarationParserRuleCall_0_0()); }
	ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getVarDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclarationOrStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclarationOrStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationOrStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getVarDeclarationOrStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__0__Impl
	rule__ExpressionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0_0()); }
(rule__ExpressionStatement__ExpressionAssignment_0_0)
{ after(grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__0__Impl
	rule__ExpressionStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getEmptyExpressionStatementAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionStatementAccess().getEmptyExpressionStatementAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfElseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__0__Impl
	rule__IfElseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfElseStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__1__Impl
	rule__IfElseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfElseStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__2__Impl
	rule__IfElseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getConditionAssignment_2()); }
(rule__IfElseStatement__ConditionAssignment_2)
{ after(grammarAccess.getIfElseStatementAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__3__Impl
	rule__IfElseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfElseStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__4__Impl
	rule__IfElseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getIfStatementAssignment_4()); }
(rule__IfElseStatement__IfStatementAssignment_4)
{ after(grammarAccess.getIfElseStatementAccess().getIfStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getGroup_5()); }
(rule__IfElseStatement__Group_5__0)?
{ after(grammarAccess.getIfElseStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfElseStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group_5__0__Impl
	rule__IfElseStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseKeyword_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfElseStatementAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseStatementAssignment_5_1()); }
(rule__IfElseStatement__ElseStatementAssignment_5_1)
{ after(grammarAccess.getIfElseStatementAccess().getElseStatementAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionAssignment_2()); }
(rule__WhileStatement__ConditionAssignment_2)
{ after(grammarAccess.getWhileStatementAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); }
(rule__WhileStatement__StatementAssignment_4)
{ after(grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getVarAssignment_2()); }
(rule__ForStatement__VarAssignment_2)
{ after(grammarAccess.getForStatementAccess().getVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getOpAssignment_4()); }
(rule__ForStatement__OpAssignment_4)
{ after(grammarAccess.getForStatementAccess().getOpAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getExpressionAssignment_5()); }
(rule__ForStatement__ExpressionAssignment_5)
{ after(grammarAccess.getForStatementAccess().getExpressionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__6__Impl
	rule__ForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getStatementAssignment_7()); }
(rule__ForStatement__StatementAssignment_7)
{ after(grammarAccess.getForStatementAccess().getStatementAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SwitchStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__0__Impl
	rule__SwitchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__1__Impl
	rule__SwitchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__2__Impl
	rule__SwitchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getVarAssignment_2()); }
(rule__SwitchStatement__VarAssignment_2)
{ after(grammarAccess.getSwitchStatementAccess().getVarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__3__Impl
	rule__SwitchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__4__Impl
	rule__SwitchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__5__Impl
	rule__SwitchStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); }
(rule__SwitchStatement__CasesAssignment_5)*
{ after(grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__6__Impl
	rule__SwitchStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getDefaultAssignment_6()); }
(rule__SwitchStatement__DefaultAssignment_6)?
{ after(grammarAccess.getSwitchStatementAccess().getDefaultAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SwitchCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__0__Impl
	rule__SwitchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getSwitchCaseAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__1__Impl
	rule__SwitchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getVarAssignment_1()); }
(rule__SwitchCase__VarAssignment_1)
{ after(grammarAccess.getSwitchCaseAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__2__Impl
	rule__SwitchCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getSwitchCaseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__3__Impl
	rule__SwitchCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__4__Impl
	rule__SwitchCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getStatementAssignment_4()); }
(rule__SwitchCase__StatementAssignment_4)
{ after(grammarAccess.getSwitchCaseAccess().getStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SwitchDefault__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__0__Impl
	rule__SwitchDefault__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getDefaultKeyword_0()); }

	'default' 

{ after(grammarAccess.getSwitchDefaultAccess().getDefaultKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__1__Impl
	rule__SwitchDefault__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getSwitchDefaultAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__2__Impl
	rule__SwitchDefault__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSwitchDefaultAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__3__Impl
	rule__SwitchDefault__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getStatementAssignment_3()); }
(rule__SwitchDefault__StatementAssignment_3)
{ after(grammarAccess.getSwitchDefaultAccess().getStatementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getSwitchDefaultAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup_2()); }
(rule__ReturnStatement__Group_2__0)?
{ after(grammarAccess.getReturnStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReturnStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__0__Impl
	rule__ReturnStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getReturnStatementAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__1__Impl
	rule__ReturnStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2_1()); }
(rule__ReturnStatement__ExpressionAssignment_2_1)
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getReturnStatementAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContinueStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__0__Impl
	rule__ContinueStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
(

)
{ after(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__1__Impl
	rule__ContinueStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }

	'continue' 

{ after(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BreakStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
(

)
{ after(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__1__Impl
	rule__BreakStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }

	'break' 

{ after(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_0__0__Impl
	rule__Expression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getAssignmentExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_0_1()); }
(rule__Expression__Group_0_1__0)
{ after(grammarAccess.getExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_0_1__0__Impl
	rule__Expression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarAssignment_0_1_0()); }
(rule__Expression__VarAssignment_0_1_0)
{ after(grammarAccess.getExpressionAccess().getVarAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_0_1__1__Impl
	rule__Expression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getEqualsSignKeyword_0_1_1()); }

	'=' 

{ after(grammarAccess.getExpressionAccess().getEqualsSignKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionAssignment_0_1_2()); }
(rule__Expression__ExpressionAssignment_0_1_2)
{ after(grammarAccess.getExpressionAccess().getExpressionAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPostfixExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getPostfixExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__1__Impl
	rule__Expression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPostfixVarAssignment_2_1()); }
(rule__Expression__PostfixVarAssignment_2_1)
{ after(grammarAccess.getExpressionAccess().getPostfixVarAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpAssignment_2_2()); }
(rule__Expression__OpAssignment_2_2)
{ after(grammarAccess.getExpressionAccess().getOpAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group__0__Impl
	rule__SimpleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getSimpleExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
(rule__SimpleExpression__Group_1__0)*
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__0__Impl
	rule__SimpleExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__1__Impl
	rule__SimpleExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpAssignment_1_1()); }
(rule__SimpleExpression__OpAssignment_1_1)
{ after(grammarAccess.getSimpleExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_2()); }
(rule__SimpleExpression__RightAssignment_1_2)
{ after(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualsExpressionParserRuleCall_0()); }
	ruleEqualsExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualsExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
(rule__AndExpression__OpAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group__0__Impl
	rule__EqualsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getEqualsExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getGroup_1()); }
(rule__EqualsExpression__Group_1__0)?
{ after(grammarAccess.getEqualsExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__0__Impl
	rule__EqualsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getEqualsExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualsExpressionAccess().getEqualsExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__1__Impl
	rule__EqualsExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getOpAssignment_1_1()); }
(rule__EqualsExpression__OpAssignment_1_1)
{ after(grammarAccess.getEqualsExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualsExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualsExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)?
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
(rule__ComparisonExpression__OpAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
(rule__ComparisonExpression__RightAssignment_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
(rule__AdditiveExpression__OpAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAtomParserRuleCall_0()); }
	ruleAtom
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAtomParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
(rule__MultiplicativeExpression__OpAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0__0__Impl
	rule__Atom__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getPrimaryExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getPrimaryExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_0_1()); }
(rule__Atom__Group_0_1__0)
{ after(grammarAccess.getAtomAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0_1__0__Impl
	rule__Atom__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0_1__1__Impl
	rule__Atom__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionAssignment_0_1_1()); }
(rule__Atom__ExpressionAssignment_0_1_1)
{ after(grammarAccess.getAtomAccess().getExpressionAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_1_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_3__0__Impl
	rule__Atom__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLiteralIntAction_3_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getLiteralIntAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueAssignment_3_1()); }
(rule__Atom__ValueAssignment_3_1)
{ after(grammarAccess.getAtomAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__0__Impl
	rule__Atom__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLiteralFloatAction_4_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getLiteralFloatAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueAssignment_4_1()); }
(rule__Atom__ValueAssignment_4_1)
{ after(grammarAccess.getAtomAccess().getValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_5__0__Impl
	rule__Atom__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLiteralBoolAction_5_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getLiteralBoolAction_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueAssignment_5_1()); }
(rule__Atom__ValueAssignment_5_1)
{ after(grammarAccess.getAtomAccess().getValueAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_6__0__Impl
	rule__Atom__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLiteralVectorAction_6_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getLiteralVectorAction_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueAssignment_6_1()); }
(rule__Atom__ValueAssignment_6_1)
{ after(grammarAccess.getAtomAccess().getValueAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_7__0__Impl
	rule__Atom__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLiteralStringAction_7_0()); }
(

)
{ after(grammarAccess.getAtomAccess().getLiteralStringAction_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueAssignment_7_1()); }
(rule__Atom__ValueAssignment_7_1)
{ after(grammarAccess.getAtomAccess().getValueAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionAssignment_0()); }
(rule__Call__FunctionAssignment_0)
{ after(grammarAccess.getCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgsAssignment_2()); }
(rule__Call__ArgsAssignment_2)?
{ after(grammarAccess.getCallAccess().getArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Arguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__0__Impl
	rule__Arguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExpressionsAssignment_0()); }
(rule__Arguments__ExpressionsAssignment_0)
{ after(grammarAccess.getArgumentsAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getGroup_1()); }
(rule__Arguments__Group_1__0)*
{ after(grammarAccess.getArgumentsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Arguments__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group_1__0__Impl
	rule__Arguments__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExpressionsAssignment_1_1()); }
(rule__Arguments__ExpressionsAssignment_1_1)
{ after(grammarAccess.getArgumentsAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__RuleDeclaration__UnorderedGroup_2
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getStatusAssignment_2_0()); }
						(rule__RuleDeclaration__StatusAssignment_2_0)
						{ after(grammarAccess.getRuleDeclarationAccess().getStatusAssignment_2_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyAssignment_2_1()); }
						(rule__RuleDeclaration__RunImmediatelyAssignment_2_1)
						{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyAssignment_2_1()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 2);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyAssignment_2_2()); }
						(rule__RuleDeclaration__HighFrequencyAssignment_2_2)
						{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyAssignment_2_2()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 3);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_2_3()); }
						(rule__RuleDeclaration__Group_2_3__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_2_3()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 4);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_2_4()); }
						(rule__RuleDeclaration__Group_2_4__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_2_4()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 5)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2(), 5);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_2_5()); }
						(rule__RuleDeclaration__Group_2_5__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_2_5()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
	rule__RuleDeclaration__UnorderedGroup_2__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
	rule__RuleDeclaration__UnorderedGroup_2__2?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
	rule__RuleDeclaration__UnorderedGroup_2__3?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
	rule__RuleDeclaration__UnorderedGroup_2__4?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
	rule__RuleDeclaration__UnorderedGroup_2__5?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_2__Impl
;
finally {
	restoreStackSize(stackSize);
}














rule__VarModifier__UnorderedGroup
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getVarModifierAccess().getUnorderedGroup());
    }
:
	rule__VarModifier__UnorderedGroup__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__VarModifier__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVarModifierAccess().getStaticAssignment_0()); }
						(rule__VarModifier__StaticAssignment_0)
						{ after(grammarAccess.getVarModifierAccess().getStaticAssignment_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVarModifierAccess().getConstAssignment_1()); }
						(rule__VarModifier__ConstAssignment_1)
						{ after(grammarAccess.getVarModifierAccess().getConstAssignment_1()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVarModifierAccess().getUnorderedGroup(), 2);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVarModifierAccess().getExternAssignment_2()); }
						(rule__VarModifier__ExternAssignment_2)
						{ after(grammarAccess.getVarModifierAccess().getExternAssignment_2()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVarModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__VarModifier__UnorderedGroup__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarModifier__UnorderedGroup__Impl
	rule__VarModifier__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__VarModifier__UnorderedGroup__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarModifier__UnorderedGroup__Impl
	rule__VarModifier__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}


rule__VarModifier__UnorderedGroup__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarModifier__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}








rule__FunModifier__UnorderedGroup
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getFunModifierAccess().getUnorderedGroup());
    }
:
	rule__FunModifier__UnorderedGroup__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__FunModifier__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getFunModifierAccess().getStaticAssignment_0()); }
						(rule__FunModifier__StaticAssignment_0)
						{ after(grammarAccess.getFunModifierAccess().getStaticAssignment_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFunModifierAccess().getUnorderedGroup(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getFunModifierAccess().getMutableAssignment_1()); }
						(rule__FunModifier__MutableAssignment_1)
						{ after(grammarAccess.getFunModifierAccess().getMutableAssignment_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFunModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__FunModifier__UnorderedGroup__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunModifier__UnorderedGroup__Impl
	rule__FunModifier__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__FunModifier__UnorderedGroup__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunModifier__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Program__DeclarationsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_0()); }
	ruleDeclaration{ after(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantNum__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantNumAccess().getVarVarDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getConstantNumAccess().getVarVarDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getConstantNumAccess().getVarVarDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getConstantNumAccess().getVarVarDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getXLiteralOrConstantNumParserRuleCall_2_0()); }
	ruleLiteralOrConstantNum{ after(grammarAccess.getVectorAccess().getXLiteralOrConstantNumParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getYLiteralOrConstantNumParserRuleCall_4_0()); }
	ruleLiteralOrConstantNum{ after(grammarAccess.getVectorAccess().getYLiteralOrConstantNumParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getZLiteralOrConstantNumParserRuleCall_6_0()); }
	ruleLiteralOrConstantNum{ after(grammarAccess.getVectorAccess().getZLiteralOrConstantNumParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getModifierVarModifierParserRuleCall_0_0()); }
	ruleVarModifier{ after(grammarAccess.getVarDeclarationAccess().getModifierVarModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
	ruleVarTypeSpecifier{ after(grammarAccess.getVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getValueExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getVarDeclarationAccess().getValueExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getForVarDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getForVarDeclarationAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__ModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getModifierFunModifierParserRuleCall_0_0()); }
	ruleFunModifier{ after(grammarAccess.getFunDeclarationAccess().getModifierFunModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getTypeFunTypeSpecifierParserRuleCall_1_0()); }
	ruleFunTypeSpecifier{ after(grammarAccess.getFunDeclarationAccess().getTypeFunTypeSpecifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__ParamlistAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getParamlistParamsParserRuleCall_4_0()); }
	ruleParams{ after(grammarAccess.getFunDeclarationAccess().getParamlistParamsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunDeclaration__StatementsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunDeclarationAccess().getStatementsCompoundStatementParserRuleCall_6_0()); }
	ruleCompoundStatement{ after(grammarAccess.getFunDeclarationAccess().getStatementsCompoundStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeStatementAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeStatementAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__StatusAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getStatusAlternatives_2_0_0()); }
(rule__RuleDeclaration__StatusAlternatives_2_0_0)
{ after(grammarAccess.getRuleDeclarationAccess().getStatusAlternatives_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__RunImmediatelyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_2_1_0()); }
(
{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_2_1_0()); }

	'runImmediately' 

{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_2_1_0()); }
)

{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__HighFrequencyAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_2_2_0()); }
(
{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_2_2_0()); }

	'highFrequency' 

{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_2_2_0()); }
)

{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__GroupAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupIDTerminalRuleCall_2_3_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleDeclarationAccess().getGroupIDTerminalRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__MinIntervalAssignment_2_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalINTTerminalRuleCall_2_4_1_0()); }
	RULE_INT{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalINTTerminalRuleCall_2_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__MaxIntervalAssignment_2_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalINTTerminalRuleCall_2_5_1_0()); }
	RULE_INT{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalINTTerminalRuleCall_2_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getStatementsCompoundStatementParserRuleCall_3_0()); }
	ruleCompoundStatement{ after(grammarAccess.getRuleDeclarationAccess().getStatementsCompoundStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarModifier__StaticAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarModifierAccess().getStaticStaticKeyword_0_0()); }
(
{ before(grammarAccess.getVarModifierAccess().getStaticStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getVarModifierAccess().getStaticStaticKeyword_0_0()); }
)

{ after(grammarAccess.getVarModifierAccess().getStaticStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarModifier__ConstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarModifierAccess().getConstConstKeyword_1_0()); }
(
{ before(grammarAccess.getVarModifierAccess().getConstConstKeyword_1_0()); }

	'const' 

{ after(grammarAccess.getVarModifierAccess().getConstConstKeyword_1_0()); }
)

{ after(grammarAccess.getVarModifierAccess().getConstConstKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarModifier__ExternAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarModifierAccess().getExternExternKeyword_2_0()); }
(
{ before(grammarAccess.getVarModifierAccess().getExternExternKeyword_2_0()); }

	'extern' 

{ after(grammarAccess.getVarModifierAccess().getExternExternKeyword_2_0()); }
)

{ after(grammarAccess.getVarModifierAccess().getExternExternKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunModifier__StaticAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunModifierAccess().getStaticStaticKeyword_0_0()); }
(
{ before(grammarAccess.getFunModifierAccess().getStaticStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getFunModifierAccess().getStaticStaticKeyword_0_0()); }
)

{ after(grammarAccess.getFunModifierAccess().getStaticStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunModifier__MutableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunModifierAccess().getMutableMutableKeyword_1_0()); }
(
{ before(grammarAccess.getFunModifierAccess().getMutableMutableKeyword_1_0()); }

	'mutable' 

{ after(grammarAccess.getFunModifierAccess().getMutableMutableKeyword_1_0()); }
)

{ after(grammarAccess.getFunModifierAccess().getMutableMutableKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamVoidKeyword_0_0()); }
(
{ before(grammarAccess.getParamsAccess().getParamVoidKeyword_0_0()); }

	'void' 

{ after(grammarAccess.getParamsAccess().getParamVoidKeyword_0_0()); }
)

{ after(grammarAccess.getParamsAccess().getParamVoidKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_0_0()); }
	ruleVarDeclaration{ after(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Params__ParamsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_1_1_0()); }
	ruleVarDeclaration{ after(grammarAccess.getParamsAccess().getParamsVarDeclarationParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__ContentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getContentsVarDeclarationOrStatementParserRuleCall_2_0()); }
	ruleVarDeclarationOrStatement{ after(grammarAccess.getCompoundStatementAccess().getContentsVarDeclarationOrStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__ExpressionAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfElseStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__IfStatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getIfStatementStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getIfElseStatementAccess().getIfStatementStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__ElseStatementAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); }
	ruleStatement{ after(grammarAccess.getIfElseStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__StatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__VarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getVarForVarDeclarationParserRuleCall_2_0()); }
	ruleForVarDeclaration{ after(grammarAccess.getForStatementAccess().getVarForVarDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__OpAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getOpRelOpParserRuleCall_4_0()); }
	ruleRelOp{ after(grammarAccess.getForStatementAccess().getOpRelOpParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__ExpressionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StatementAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_7_0()); }
	ruleStatement{ after(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__VarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getVarVarDeclarationCrossReference_2_0()); }
(
{ before(grammarAccess.getSwitchStatementAccess().getVarVarDeclarationIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getSwitchStatementAccess().getVarVarDeclarationIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getSwitchStatementAccess().getVarVarDeclarationCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__CasesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getCasesSwitchCaseParserRuleCall_5_0()); }
	ruleSwitchCase{ after(grammarAccess.getSwitchStatementAccess().getCasesSwitchCaseParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__DefaultAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getDefaultSwitchDefaultParserRuleCall_6_0()); }
	ruleSwitchDefault{ after(grammarAccess.getSwitchStatementAccess().getDefaultSwitchDefaultParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getVarSignedIntParserRuleCall_1_0()); }
	ruleSignedInt{ after(grammarAccess.getSwitchCaseAccess().getVarSignedIntParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__StatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__StatementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getStatementStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getSwitchDefaultAccess().getStatementStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__VarAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getVarVarParserRuleCall_0_1_0_0()); }
	ruleVar{ after(grammarAccess.getExpressionAccess().getVarVarParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpressionAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_0_1_2_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionSimpleExpressionParserRuleCall_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getExpressionAccess().getExpressionSimpleExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__PostfixVarAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPostfixVarVarDeclarationCrossReference_2_1_0()); }
(
{ before(grammarAccess.getExpressionAccess().getPostfixVarVarDeclarationIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getExpressionAccess().getPostfixVarVarDeclarationIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getExpressionAccess().getPostfixVarVarDeclarationCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpPostFixOpParserRuleCall_2_2_0()); }
	rulePostFixOp{ after(grammarAccess.getExpressionAccess().getOpPostFixOpParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getNameVarDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getVarAccess().getNameVarDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVarAccess().getNameVarDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVarAccess().getNameVarDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }

	'||' 

{ after(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getSimpleExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualsExpressionParserRuleCall_1_2_0()); }
	ruleEqualsExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualsExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getOpEqOpParserRuleCall_1_1_0()); }
	ruleEqOp{ after(grammarAccess.getEqualsExpressionAccess().getOpEqOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getEqualsExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOpRelOpParserRuleCall_1_1_0()); }
	ruleRelOp{ after(grammarAccess.getComparisonExpressionAccess().getOpRelOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAddOpParserRuleCall_1_1_0()); }
	ruleAddOp{ after(grammarAccess.getAdditiveExpressionAccess().getOpAddOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMulOpParserRuleCall_1_1_0()); }
	ruleMulOp{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMulOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAtomParserRuleCall_1_2_0()); }
	ruleAtom{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAtomParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ExpressionAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_0_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAtomAccess().getExpressionExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionVarParserRuleCall_1_0()); }
	ruleVar{ after(grammarAccess.getAtomAccess().getExpressionVarParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionCallParserRuleCall_2_0()); }
	ruleCall{ after(grammarAccess.getAtomAccess().getExpressionCallParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueSignedIntParserRuleCall_3_1_0()); }
	ruleSignedInt{ after(grammarAccess.getAtomAccess().getValueSignedIntParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueSignedFloatParserRuleCall_4_1_0()); }
	ruleSignedFloat{ after(grammarAccess.getAtomAccess().getValueSignedFloatParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueBoolParserRuleCall_5_1_0()); }
	ruleBool{ after(grammarAccess.getAtomAccess().getValueBoolParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueVectorParserRuleCall_6_1_0()); }
	ruleVector{ after(grammarAccess.getAtomAccess().getValueVectorParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ValueAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getValueSTRINGTerminalRuleCall_7_1_0()); }
	RULE_STRING{ after(grammarAccess.getAtomAccess().getValueSTRINGTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionFunDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getCallAccess().getFunctionFunDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getCallAccess().getFunctionFunDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getCallAccess().getFunctionFunDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgsArgumentsParserRuleCall_2_0()); }
	ruleArguments{ after(grammarAccess.getCallAccess().getArgsArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


